I have these codes , I want you to improve it and clean thim , and I want any thing in it can I reuse it make it reuseable , and make  the design better ,
just make it better and more pro , and give me full codes please , and I have table in db called product_by_car has (product_id ,model_id ,sub_service_id ),
it is connected to table car_model and sub_services  so , I want you to make it display when I choose car model and car make as sub service data 
if the api call for  product_by_car is not empty , and keep in mind that is the car could be in the db
I mean make it see if the model_id in product_by_car is there make it display data from sub_services table by model id in product_by_car: 
notes (improve the sizes of the design even the texts sizes, every thing improve,
and I want you to make light and dark themes ,
I want to use only these fonts families (El_Messiri,Cairo),
keep in mind that the widgets should be reuseable as you can ,
I want everything work perfectly,
if you want me to give you all the lib folder to remove waht we do not need and fix anything and modefiy or any thing , I will , just tell me
the widgets I want thim as statliess widgets if posible

).

here are contrllers :
[
  import 'dart:convert';

import 'package:ecom_modwir/controller/license_plate_controller.dart';
import 'package:ecom_modwir/core/class/statusrequest.dart';
import 'package:ecom_modwir/core/constant/keys.dart';
import 'package:ecom_modwir/core/functions/handingdatacontroller.dart';
import 'package:ecom_modwir/core/functions/snack_bar_notif.dart';
import 'package:ecom_modwir/core/services/services.dart';
import 'package:ecom_modwir/data/datasource/remote/sub_service_data.dart';
import 'package:ecom_modwir/data/datasource/remote/vehicles_data.dart';
import 'package:ecom_modwir/data/model/cars/user_cars.dart';
import 'package:ecom_modwir/data/model/services/sub_services_model.dart';
import 'package:ecom_modwir/data/model/cars/make_model.dart';
import 'package:get/get.dart';
import 'package:flutter/material.dart';
import 'dart:io';
import 'package:image_picker/image_picker.dart';
import 'package:file_picker/file_picker.dart';

class ServicesDisplayController extends GetxController {
  final MyServices myServices = Get.find();
  final ServiceItemsData serviceItemsData = ServiceItemsData(Get.find());
  final VehicleData userVehicleData = VehicleData(Get.find());

  final LicensePlateController licensePlateController =
      Get.put(LicensePlateController());

  // State variables
  StatusRequest statusRequest = StatusRequest.loading;
  String serviceId = "";
  String lang = "en";
  List<SubServiceModel> serviceItems = [];
  List<CarMake> carMakes = [];
  int selectedMakeIndex = -1;
  int selectedModelIndex = -1;
  PriceSort currentSort = PriceSort.lowToHigh;
  late FixedExtentScrollController scrollController;

  // Form controllers
  final TextEditingController notesController = TextEditingController();
  final TextEditingController phoneController = TextEditingController();
  int? selectedYear;
  final List<File> attachments = <File>[];
  final ImagePicker _imagePicker = ImagePicker();
  List<UserCarModel> userVehicles = [];
  int selectedVehicleIndex = 0;
  bool showAddCarForm = false;
  bool isEditingVehicle = false;
  bool isSavingVehicle = false;
  int? vehicleToEditIndex;

  // Computed property for selected car models
  List<CarModel> get selectedModels {
    if (selectedMakeIndex < 0 ||
        carMakes.isEmpty ||
        selectedMakeIndex >= carMakes.length) {
      return [];
    }
    return carMakes[selectedMakeIndex].models ?? [];
  }

  @override
  void onInit() async {
    super.onInit();
    statusRequest = StatusRequest.loading;
    update();

    try {
      await initializeData();
      await _loadUserVehicles(); // Load user vehicles

      await _loadCarMakes();

      _setDefaultSelections();

      _initScrollController();
    } catch (e) {
      print("Initialization error: $e");

      statusRequest = StatusRequest.failure;

      update();
    }
  }

  @override
  void onClose() {
    notesController.dispose();
    licensePlateController.dispose();
    phoneController.dispose();
    scrollController.dispose();
    super.onClose();
  }

  Future<void> initializeData() async {
    try {
      final arguments = Get.arguments;
      serviceId = arguments?['service_id']?.toString().trim() ?? "";
      lang = myServices.sharedPreferences.getString("lang")?.trim() ?? "en";

      if (serviceId.isEmpty) {
        throw "Invalid service ID: $serviceId";
      }

      await _loadServiceDetails();
    } catch (e) {
      print("Initialization error: $e");
      statusRequest = StatusRequest.failure;
      update();
      Get.back();
    }
  }

  void _initScrollController() {
    scrollController = FixedExtentScrollController(
        initialItem:
            selectedYear != null ? DateTime.now().year - selectedYear! : 0);
  }

  Future<void> _loadUserVehicles() async {
    try {
      final userId = myServices.sharedPreferences.getString("userId");
      if (userId == null || userId.isEmpty) return;

      final response = await userVehicleData.getUserVehicles(userId, lang);

      // Handle the response directly instead of using fold
      if (response['status'] == "success") {
        final rawData = response['data'] ?? [];

        userVehicles = List<UserCarModel>.from(rawData.map((x) {
          try {
            return UserCarModel.fromJson(x);
          } catch (e) {
            print("Error parsing vehicle: $e\nData: $x");
            return null;
          }
        }).where((item) => item != null)).cast<UserCarModel>();

        if (userVehicles.isNotEmpty) {
          selectedVehicleIndex = 0;
          _loadLicensePlateFromVehicle(userVehicles[selectedVehicleIndex]);
        }
      } else {
        print("Vehicles API returned non-success status");
        userVehicles = [];
      }

      update();
    } catch (e) {
      print("Load vehicles error: $e");
      userVehicles = [];
      update();
    }
  }

  void toggleAddCarForm() {
    showAddCarForm = !showAddCarForm;

    if (showAddCarForm) {
      // Reset form when showing
      isEditingVehicle = false;
      vehicleToEditIndex = null;
      licensePlateController.clearAll();
      selectedYear = DateTime.now().year;

      // Reset make/model selections
      if (carMakes.isNotEmpty) {
        selectedMakeIndex = 0;
        if (carMakes[0].models != null && carMakes[0].models!.isNotEmpty) {
          selectedModelIndex = 0;
        } else {
          selectedModelIndex = -1;
        }
      }
    }

    update();
  }

  void selectVehicle(int index) {
    if (index >= 0 && index < userVehicles.length) {
      selectedVehicleIndex = index;

      // Load the selected vehicle's license plate
      final selectedVehicle = userVehicles[selectedVehicleIndex];
      _loadLicensePlateFromVehicle(selectedVehicle);

      update();
    }
  }

  void editVehicle(int index) {
    if (index >= 0 && index < userVehicles.length) {
      final vehicle = userVehicles[index];

      // Set editing state
      isEditingVehicle = true;
      vehicleToEditIndex = index;
      showAddCarForm = true;

      // Load make and model
      _setVehicleMakeAndModel(vehicle.makeId!, vehicle.modelId!);

      // Set year
      selectedYear = vehicle.year as int?;

      // Load license plate
      _loadLicensePlateFromVehicle(vehicle);

      update();
    }
  }

  void _loadLicensePlateFromVehicle(UserCarModel vehicle) {
    try {
      licensePlateController.clearAll();

      // Get license plate data
      final licensePlateData = vehicle.licensePlate;

      // Parse the English license plate
      final englishPlate = licensePlateData!['en'] as String? ?? '-';
      final englishParts = englishPlate.split('-');
      if (englishParts.length >= 2) {
        final englishLetters = englishParts[0].replaceAll(' ', '');
        final englishNumbers = englishParts[1].replaceAll(' ', '');

        // Set license plate controller values
        licensePlateController.handleEnglishLettersInput(englishLetters);
        licensePlateController.handleEnglishNumbersInput(englishNumbers);
      }

      update();
    } catch (e) {
      print("Error loading license plate: $e");
    }
  }

  void _setVehicleMakeAndModel(int makeId, int modelId) {
    // Find make index
    selectedMakeIndex = carMakes.indexWhere((make) => make.makeId == makeId);

    if (selectedMakeIndex >= 0) {
      // Find model index
      selectedModelIndex =
          selectedModels.indexWhere((model) => model.modelId == modelId);
      if (selectedModelIndex < 0) {
        selectedModelIndex = 0;
      }
    } else {
      // Default to first make and model if not found
      selectedMakeIndex = carMakes.isNotEmpty ? 0 : -1;
      selectedModelIndex = selectedModels.isNotEmpty ? 0 : -1;
    }
  }

  Future<void> saveVehicle() async {
    try {
      if (selectedMakeIndex < 0 ||
          selectedModelIndex < 0 ||
          selectedYear == null) {
        showErrorSnackbar('error'.tr, 'please_complete_all_fields'.tr);
        return;
      }

      isSavingVehicle = true;
      update();

      // Get selected make and model info
      final selectedMake = carMakes[selectedMakeIndex];
      final selectedModel = selectedModels[selectedModelIndex];
      final licensePlateJson = licensePlateController.getLicensePlateJson();
      final decodedLicensePlate = json.decode(licensePlateJson);

      // Check if the decoded data is a List or a single Map
      final licensePlateData = decodedLicensePlate is List
          ? decodedLicensePlate[0]
          : decodedLicensePlate;

      // Ensure it's a Map
      if (licensePlateData is! Map<String, dynamic>) {
        showErrorSnackbar('error'.tr, 'invalid_license_plate_format'.tr);
        return;
      }

      // Create vehicle object
      final userId = myServices.sharedPreferences.getString("userId");

      final UserCarModel vehicle = UserCarModel(
        vehicleId: isEditingVehicle && vehicleToEditIndex != null
            ? userVehicles[vehicleToEditIndex!].vehicleId
            : 0,
        userId: userId != null ? int.tryParse(userId) : null,
        makeId: selectedMake.makeId,
        modelId: selectedModel.modelId,
        makeName: selectedMake.name[lang] ?? '',
        modelName: selectedModel.name[lang] ?? '',
        year: selectedYear!,
        licensePlate: licensePlateData,
      );
      Map data = {
        "vehicle_id": isEditingVehicle && vehicleToEditIndex.toString() != null
            ? userVehicles[vehicleToEditIndex!].vehicleId.toString()
            : 0,
        "user_id": userId.toString(),
        "car_make_id": selectedMake.makeId.toString(),
        "car_model_id": selectedModel.modelId.toString(),
        "year": selectedYear.toString(),
        "license_plate_number": licensePlateData,
      };

      final finalData = jsonEncode(data);

      // Save to API
      final response = isEditingVehicle
          ? await userVehicleData.updateVehicle(finalData)
          : await userVehicleData.addVehicle(vehicle);
      statusRequest = handlingData(response);
      if (StatusRequest.success == statusRequest) {
        if (response['status'] == "success" ||
            response['message'] == "No changes made") {
          // Handle successful save
          if (isEditingVehicle && vehicleToEditIndex != null) {
            // Update existing vehicle in the list
            userVehicles[vehicleToEditIndex!] = vehicle;
          } else {
            // Add new vehicle to the list
            final savedVehicle = UserCarModel.fromJson(response['data']);
            userVehicles.add(savedVehicle);
            selectedVehicleIndex = userVehicles.length - 1;
          }

          // Reset form state
          showAddCarForm = false;
          isEditingVehicle = false;
          vehicleToEditIndex = null;
          licensePlateController.clearAll();

          showSuccessSnackbar('success'.tr,
              isEditingVehicle ? 'vehicle_updated'.tr : 'vehicle_added'.tr);
        } else if (response['status'] == "error") {
          showErrorSnackbar('error'.tr, 'error'.tr);
        } else {
          showErrorSnackbar('error'.tr, 'vehicle_save_failed'.tr);
        }
      } else {
        statusRequest = StatusRequest.failure;
      }
    } catch (e) {
      print("Error saving vehicle: $e");
      showErrorSnackbar('error'.tr, 'vehicle_save_failed'.tr);
    } finally {
      isSavingVehicle = false;
      update();
    }
  }

  Future<void> deleteVehicle(int index) async {
    try {
      if (index < 0 || index >= userVehicles.length) return;

      final vehicle = userVehicles[index];

      // Make API call to delete
      final result = await userVehicleData.deleteVehicle(
          vehicle.vehicleId.toString(), vehicle.userId.toString());

      result.fold(
        (failure) {
          print("UserCarModel delete failed: $failure");
          showErrorSnackbar('error'.tr, 'vehicle_delete_failed'.tr);
        },
        (response) {
          if (response['status'] == "success") {
            // Remove from local list
            userVehicles.removeAt(index);

            // Update selected index if needed
            if (selectedVehicleIndex >= userVehicles.length) {
              selectedVehicleIndex =
                  userVehicles.isEmpty ? -1 : userVehicles.length - 1;
            }

            showSuccessSnackbar('success'.tr, 'vehicle_deleted'.tr);
          } else {
            showErrorSnackbar('error'.tr, 'vehicle_delete_failed'.tr);
          }
        },
      );
    } catch (e) {
      print("Error deleting vehicle: $e");
      showErrorSnackbar('error'.tr, 'vehicle_delete_failed'.tr);
    }
    update();
  }

  void updateYear(int newYear) {
    selectedYear = newYear;
    update();
  }

  Future<void> _loadCarMakes() async {
    try {
      final result = await serviceItemsData.getCarMakes(lang);

      result.fold(
        (failure) {
          print("Car makes API failure: $failure");
          statusRequest = failure;
        },
        (response) {
          statusRequest = handlingData(response);

          if (statusRequest == StatusRequest.success &&
              response['status'] == "success") {
            final rawData = response['data'] ?? [];

            carMakes = List<CarMake>.from(rawData.map((x) {
              try {
                return CarMake.fromJson(x);
              } catch (e) {
                print("Error parsing car make: $e\nData: $x");
                return null;
              }
            }).where((item) => item != null));

            print("Successfully parsed ${carMakes.length} car makes");
          } else {
            print("Car makes API returned non-success status");
            statusRequest = StatusRequest.none;
          }
        },
      );
    } catch (e) {
      print("Car makes error: $e");
      statusRequest = StatusRequest.serverFailure;
    }
    update();
  }

  void _setDefaultSelections() {
    try {
      if (carMakes.isNotEmpty) {
        selectedMakeIndex = 0;
        if (carMakes[0].models.isNotEmpty ?? false) {
          selectedModelIndex = 0;
        }
      } else {
        selectedMakeIndex = -1;
        selectedModelIndex = -1;
      }
    } catch (e) {
      print("Error setting default selections: $e");
    }
    update();
  }

  void selectCarMake(int index) {
    if (index >= 0 && index < carMakes.length) {
      selectedMakeIndex = index;
      selectedModelIndex = carMakes[index].models.isNotEmpty == true ? 0 : -1;
      update();
    }
  }

  void selectCarModel(int index) {
    if (index >= 0 && index < selectedModels.length) {
      selectedModelIndex = index;
      update();
    }
  }

  void retryLoading() {
    statusRequest = StatusRequest.loading;
    update();
    _loadCarMakes().then((_) => _setDefaultSelections());
  }

  void selectService(int index) {
    if (index < 0 || index >= serviceItems.length) return;

    for (var item in serviceItems) {
      item.isSelected = false;
    }
    serviceItems[index].isSelected = true;
    update();
  }

  void sortServicesByPrice(PriceSort sort) {
    currentSort = sort;

    serviceItems.sort((a, b) {
      final priceA = _parsePrice(a.price);
      final priceB = _parsePrice(b.price);
      return sort == PriceSort.lowToHigh
          ? priceA.compareTo(priceB)
          : priceB.compareTo(priceA);
    });

    update();
  }

  double _parsePrice(dynamic price) {
    if (price is double) return price;
    if (price is int) return price.toDouble();
    if (price is String) {
      return double.tryParse(price.replaceAll(RegExp(r'[^0-9.]'), '')) ?? 0.0;
    }
    return 0.0;
  }

  Future<void> _loadServiceDetails() async {
    try {
      statusRequest = StatusRequest.loading;
      update();

      final result = await serviceItemsData.getServiceDetails(serviceId, lang);

      result.fold(
        (failure) {
          serviceItems = [];
          statusRequest = failure;
        },
        (response) {
          try {
            serviceItems = (response['sub_services'] as List? ?? [])
                .map((x) => SubServiceModel.fromJson(x))
                .whereType<SubServiceModel>()
                .toList();

            // Set first service as selected by default
            if (serviceItems.isNotEmpty) {
              serviceItems[0].isSelected = true;
            }

            sortServicesByPrice(currentSort);
            statusRequest = StatusRequest.success;
          } catch (e) {
            print("Error parsing service details: $e");
            serviceItems = [];
            statusRequest = StatusRequest.failure;
          }
        },
      );
    } catch (e) {
      print("Service details error: $e");
      serviceItems = [];
      statusRequest = StatusRequest.serverFailure;
    }
    update();
  }

  // Attachment handling
  Future<void> pickAttachment(ImageSource source) async {
    try {
      final pickedFile = await _imagePicker.pickImage(
        source: source,
        maxWidth: 1200,
        maxHeight: 1200,
        imageQuality: 85,
      );

      if (pickedFile != null) {
        attachments.add(File(pickedFile.path));
        update();
      }
    } catch (e) {
      print("Error picking image: $e");
      showErrorSnackbar('error'.tr, 'failed_to_pick_image'.tr);
    }
  }

  Future<void> pickDocument() async {
    try {
      FilePickerResult? result = await FilePicker.platform.pickFiles(
        type: FileType.custom,
        allowedExtensions: ['pdf', 'doc', 'docx', 'xls', 'xlsx', 'txt'],
      );

      if (result != null &&
          result.files.isNotEmpty &&
          result.files.single.path != null) {
        attachments.add(File(result.files.single.path!));
        update();
      }
    } catch (e) {
      print("Error picking document: $e");
      showErrorSnackbar('error'.tr, 'failed_to_pick_document'.tr);
    }
  }

  void removeAttachment(File file) {
    attachments.remove(file);
    update();
  }

  // Order completion
  Future<void> completeOrder() async {
    try {
      if (!_validateOrderDetails()) {
        return;
      }

      statusRequest = StatusRequest.loading;
      update();

      // Get the selected service
      final selectedService = serviceItems.firstWhere(
        (service) => service.isSelected,
        orElse: () => serviceItems.first,
      );

      // Get selected car details
      final selectedMake = carMakes[selectedMakeIndex];
      final selectedModel = selectedModels[selectedModelIndex];

      // Prepare order data
      final Map<String, dynamic> orderData = {
        'service_id': selectedService.serviceId,
        'make_id': selectedMake.makeId,
        'model_id': selectedModel.modelId,
        'year': selectedYear,
        'license_plate':
            licensePlateController.getLicensePlateJson(), // Get formatted JSON
        'notes': notesController.text,
        'user_id': myServices.sharedPreferences.getString("userId") ?? "",
      };

      // For now, simulate a successful response
      await Future.delayed(const Duration(seconds: 2));

      statusRequest = StatusRequest.success;
      update();
      // print(
      //     "======================${licensePlateController.getLicensePlateJson()}");
      showSuccessSnackbar('success'.tr, 'order_placed_successfully'.tr);
      _resetForm();

      // TODO: Navigate to appropriate screen
      // Get.offNamed('/orders');
    } catch (e) {
      print("Error completing order: $e");
      statusRequest = StatusRequest.failure;
      update();
      showErrorSnackbar('error'.tr, 'failed_to_place_order'.tr);
    }
  }

  Future<void> continueAsGuest() async {
    try {
      if (!_validateGuestDetails()) {
        return;
      }

      statusRequest = StatusRequest.loading;
      update();

      // TODO: Implement actual guest API call here
      // For now, simulate a successful response
      await Future.delayed(const Duration(seconds: 2));

      statusRequest = StatusRequest.success;
      update();

      showSuccessSnackbar('success'.tr, 'order_placed_successfully'.tr);
      _resetForm();
      Get.back();
    } catch (e) {
      print("Error processing guest order: $e");
      statusRequest = StatusRequest.failure;
      update();
      showErrorSnackbar('error'.tr, 'failed_to_place_order'.tr);
    }
  }

  bool _validateOrderDetails() {
    final licensePlateData = licensePlateController.getLicensePlateJson();

    // Check if license plate is empty
    if (licensePlateData == '[{"en":"-","ar":"-"}]') {
      showErrorSnackbar('Error', 'Please enter license plate');
      return false;
    }

    if (selectedYear == null) {
      showErrorSnackbar('error'.tr, 'please_select_car_year'.tr);
      return false;
    }

    return true;
  }

  bool _validateGuestDetails() {
    if (phoneController.text.isEmpty || phoneController.text.length < 9) {
      showErrorSnackbar('error'.tr, 'please_enter_valid_phone'.tr);
      return false;
    }

    return _validateOrderDetails();
  }

  void _resetForm() {
    notesController.clear();
    licensePlateController.clearAll();
    phoneController.clear();
    selectedYear = null;
    attachments.clear();
    update();
  }
}
import 'package:ecom_modwir/core/services/services.dart';
import 'package:get/get.dart';
import 'dart:math' as math;
import 'dart:convert';

/// Controller for handling license plate input in both Arabic and English
class LicensePlateController extends GetxController {
  // Observable strings for storing raw input values
  final RxString _rawArabicLetters = ''.obs;
  final RxString _rawEnglishLetters = ''.obs;
  final RxString _rawArabicNumbers = ''.obs;
  final RxString _rawEnglishNumbers = ''.obs;

  final MyServices myServices = Get.find();

  String lang = "ar";

  // Flags to prevent update loops during conversions
  bool _updatingLetters = false;
  bool _updatingNumbers = false;

  // Constants for maximum input length
  static const int maxLetters = 3;
  static const int maxNumbers = 4;

  @override
  void onInit() {
    super.onInit();
    initializeData();
  }

  initializeData() {
    lang = myServices.sharedPreferences.getString("lang")?.trim() ?? "ar";
  }

  // Getters that return formatted strings with spaces
  String get arabicLetters => _formatWithSpaces(_rawArabicLetters.value);
  String get englishLetters => _formatWithSpaces(_rawEnglishLetters.value);
  String get arabicNumbers => _formatWithSpaces(_rawArabicNumbers.value);
  String get englishNumbers => _formatWithSpaces(_rawEnglishNumbers.value);

  // Format string by adding spaces between characters
  String _formatWithSpaces(String input) => input.split('').join(' ');

  // Process input by cleaning and enforcing maximum length
  void _processInput(String value, bool isLetters, bool isArabic) {
    // Remove spaces and trim to max length
    final cleaned = value.replaceAll(' ', '');
    final maxLength = isLetters ? maxLetters : maxNumbers;
    final processed = cleaned.substring(0, math.min(maxLength, cleaned.length));

    // Update the appropriate fields
    if (isLetters) {
      _updateLetters(processed, isArabic);
    } else {
      _updateNumbers(processed, isArabic);
    }
  }

  void _updateLetters(String value, bool isArabic) {
    if (_updatingLetters) return;
    _updatingLetters = true;

    try {
      if (isArabic) {
        // Convert any English letters in Arabic field to Arabic
        _rawArabicLetters.value = value.split('').map((c) {
          return RegExp(r'[a-zA-Z]').hasMatch(c)
              ? LicensePlateConverter.englishToArabicLetters(c)
              : c;
        }).join();

        // Convert Arabic to English for English field
        _rawEnglishLetters.value = LicensePlateConverter.arabicToEnglishLetters(
            _rawArabicLetters.value);
      } else {
        // Convert any Arabic letters in English field to English
        _rawEnglishLetters.value = value.toUpperCase().split('').map((c) {
          return RegExp(r'[\u0600-\u06FF]').hasMatch(c)
              ? LicensePlateConverter.arabicToEnglishLetters(c)
              : c;
        }).join();

        // Convert English to Arabic for Arabic field
        _rawArabicLetters.value = LicensePlateConverter.englishToArabicLetters(
            _rawEnglishLetters.value);
      }

      // Enforce max length
      _rawArabicLetters.value = _rawArabicLetters.value
          .substring(0, math.min(maxLetters, _rawArabicLetters.value.length));
      _rawEnglishLetters.value = _rawEnglishLetters.value
          .substring(0, math.min(maxLetters, _rawEnglishLetters.value.length));

      update();
    } finally {
      _updatingLetters = false;
    }
  }

  void _updateNumbers(String value, bool isArabicField) {
    if (_updatingNumbers) return;
    _updatingNumbers = true;

    try {
      if (isArabicField) {
        // Clean input: allow both English and Arabic numbers
        final cleaned = value.replaceAll(RegExp(r'[^0-9٠-٩]'), '');

        // Convert to English first for consistent processing
        final englishNumbers =
            LicensePlateConverter.arabicToEnglishNumbers(cleaned);

        // Apply max length
        final limited = englishNumbers.substring(
            0, math.min(maxNumbers, englishNumbers.length));

        // Update both fields
        _rawEnglishNumbers.value = limited;
        _rawArabicNumbers.value =
            LicensePlateConverter.englishToArabicNumbers(limited);
      } else {
        // Clean input for English field
        final cleaned = value.replaceAll(RegExp(r'[^0-9]'), '');
        final limited =
            cleaned.substring(0, math.min(maxNumbers, cleaned.length));

        _rawEnglishNumbers.value = limited;
        _rawArabicNumbers.value =
            LicensePlateConverter.englishToArabicNumbers(limited);
      }

      update();
    } finally {
      _updatingNumbers = false;
    }
  }

  // Public methods for input handling
  void handleArabicLettersInput(String value) =>
      _processInput(value, true, true);

  void handleEnglishLettersInput(String value) =>
      _processInput(value, true, false);

  void handleArabicNumbersInput(String value) {
    // Allow both English and Arabic numbers in Arabic field
    final cleaned =
        value.replaceAll(' ', '').replaceAll(RegExp(r'[^0-9٠-٩]'), '');
    _processInput(cleaned, false, true);
  }

  void handleEnglishNumbersInput(String value) =>
      _processInput(value, false, false);

  // Method to clear all fields
  void clearAll() {
    _rawArabicLetters.value = '';
    _rawEnglishLetters.value = '';
    _rawArabicNumbers.value = '';
    _rawEnglishNumbers.value = '';
    update();
  }

  // Get the complete license plate value (letters + numbers)
  String getArabicLicensePlate() =>
      "${_rawArabicLetters.value}-${_rawArabicNumbers.value}";

  String getEnglishLicensePlate() =>
      "${_rawEnglishLetters.value}-${_rawEnglishNumbers.value}";

  // Get license plate data as a formatted JSON string
  String getLicensePlateJson() {
    final Map<String, String> licensePlateData = {
      'en': getEnglishLicensePlate().split('').join(' '),
      'ar': getArabicLicensePlate().split('').join(' '),
    };
    return jsonEncode([licensePlateData]);
  }
}

/// Utility class for converting between Arabic and English characters
class LicensePlateConverter {
  // Map of Arabic letters to their English equivalents - Saudi License Plates
  static const Map<String, String> _arabicToEnglishLetters = {
    'أ': 'A',
    'ا': 'A',
    'آ': 'A',
    'إ': 'A',
    'ب': 'B',
    'ت': 'T',
    'ث': 'C',
    'ج': 'J',
    'ح': 'H',
    'خ': 'X',
    'د': 'D',
    'ذ': 'Z',
    'ر': 'R',
    'ز': 'Z',
    'س': 'S',
    'ش': 'X',
    'ص': 'S',
    'ض': 'D',
    'ط': 'T',
    'ظ': 'Z',
    'ع': 'E',
    'غ': 'G',
    'ف': 'F',
    'ق': 'G',
    'ك': 'K',
    'ل': 'L',
    'م': 'M',
    'ن': 'N',
    'ه': 'H',
    'و': 'W',
    'ي': 'Y',
    'ى': 'Y',
    'ئ': 'Y'
  };

  // Map of English letters to their Arabic equivalents - Saudi License Plates
  static const Map<String, String> _englishToArabicLetters = {
    'A': 'أ',
    'B': 'ب',
    'C': 'ث',
    'D': 'د',
    'E': 'ع',
    'F': 'ف',
    'G': 'غ',
    'H': 'ح',
    'I': 'ي',
    'J': 'ج',
    'K': 'ك',
    'L': 'ل',
    'M': 'م',
    'N': 'ن',
    'O': 'و',
    'P': 'ب',
    'Q': 'ق',
    'R': 'ر',
    'S': 'س',
    'T': 'ت',
    'U': 'و',
    'V': 'ف',
    'W': 'و',
    'X': 'خ',
    'Y': 'ي',
    'Z': 'ز'
  };

  // Map for converting between Arabic and English numerals
  static const Map<String, String> _numberMap = {
    '0': '٠',
    '1': '١',
    '2': '٢',
    '3': '٣',
    '4': '٤',
    '5': '٥',
    '6': '٦',
    '7': '٧',
    '8': '٨',
    '9': '٩',
    '٠': '0',
    '١': '1',
    '٢': '2',
    '٣': '3',
    '٤': '4',
    '٥': '5',
    '٦': '6',
    '٧': '7',
    '٨': '8',
    '٩': '9'
  };

  // Convert Arabic letters to English
  static String arabicToEnglishLetters(String input) {
    return _convertWithMap(input, _arabicToEnglishLetters);
  }

  // Convert English letters to Arabic
  static String englishToArabicLetters(String input) {
    // Convert to uppercase for consistent mapping
    final upperInput = input.toUpperCase();
    return _convertWithMap(upperInput, _englishToArabicLetters);
  }

  // Convert Arabic numerals to English
  static String arabicToEnglishNumbers(String input) {
    return input.replaceAllMapped(RegExp(r'[٠-٩]'),
        (match) => _numberMap[match.group(0)] ?? match.group(0)!);
  }

  // Convert English numerals to Arabic
  static String englishToArabicNumbers(String input) {
    return input.replaceAllMapped(RegExp(r'[0-9]'),
        (match) => _numberMap[match.group(0)] ?? match.group(0)!);
  }

  // Helper method to convert characters using a mapping
  static String _convertWithMap(String input, Map<String, String> map) {
    return input.split('').map((c) => map[c] ?? c).join();
  }
}
import 'dart:async';
import 'package:ecom_modwir/data/datasource/remote/auth/login.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:ecom_modwir/core/constant/app_dimensions.dart';
import 'package:ecom_modwir/core/constant/color.dart';
import 'package:ecom_modwir/core/constant/textstyle_manger.dart';
import 'package:ecom_modwir/core/services/services.dart';
import 'package:ecom_modwir/view/widget/services/cars/primary_button.dart';
import 'package:geolocator/geolocator.dart';
import 'package:ecom_modwir/data/datasource/remote/auth/signup.dart';
import 'package:geocoding/geocoding.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:ecom_modwir/data/datasource/remote/address_data.dart';

class AuthService extends GetxController {
  final MyServices myServices = Get.find();
  final AddressData addressData = AddressData(Get.find());

  // Controllers for login/signup
  SignupData signupData = SignupData(Get.find());
  LoginData loginData = LoginData(Get.find());

  List data = [];

  final TextEditingController phoneController = TextEditingController();
  final TextEditingController firstNameController = TextEditingController();
  final TextEditingController lastNameController = TextEditingController();
  final TextEditingController otpController = TextEditingController();

  // Map controllers and properties
  Completer<GoogleMapController>? completercontroller;
  List<Marker> markers = [];
  CameraPosition? cameraPosition;
  Position? position;

  // Address data
  double? latitude;
  double? longitude;
  String? address;
  String? city;
  String? street;

  // States
  RxBool isLoading = false.obs;
  RxBool isLoginMode = true.obs;
  RxBool isLoginFor = true.obs;
  RxBool isVerifying = false.obs;
  RxBool needsAddress = false.obs;
  RxBool editingInfo = false.obs;

  // Store the current context to handle dialog dismissal properly
  BuildContext? _dialogContext;

  // For storing the callback to execute after successful auth
  Function? onAuthSuccess;

  @override
  void onClose() {
    phoneController.dispose();
    firstNameController.dispose();
    lastNameController.dispose();
    otpController.dispose();
    super.onClose();
  }

  void toggleMode() {
    isLoginMode.value = !isLoginMode.value;
  }

  // Reset state when showing auth dialog
  void _resetState() {
    isVerifying.value = false;
    needsAddress.value = false;
    editingInfo.value = false;
    isLoading.value = false;
    otpController.clear();
  }

  // Show auth dialog with a callback for after completion
  void showAuthDialog(BuildContext context, {Function? onSuccess}) {
    // Reset state
    _resetState();
    onAuthSuccess = onSuccess;
    _dialogContext = context;

    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) {
        _dialogContext = context; // Store the context for later dismissal
        return Dialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(AppDimensions.borderRadius),
          ),
          child: SingleChildScrollView(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                children: [
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 1),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [
                        IconButton(
                          icon: const Icon(Icons.close),
                          onPressed: () {
                            Navigator.pop(context);
                            _dialogContext = null;
                          },
                        ),
                      ],
                    ),
                  ),
                  Obx(() {
                    if (isVerifying.value) {
                      return _buildOtpVerification();
                    } else if (needsAddress.value) {
                      return _buildAddressCollection();
                    } else if (editingInfo.value) {
                      return _buildEditSignupInfo();
                    } else {
                      return isLoginMode.value
                          ? _buildLoginForm()
                          : _buildSignupForm();
                    }
                  }),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  // Helper method to dismiss dialog safely
  void _dismissDialog() {
    if (_dialogContext != null && Navigator.canPop(_dialogContext!)) {
      Navigator.pop(_dialogContext!);
      _dialogContext = null;
    }
  }

  Widget _buildLoginForm() {
    return Column(
      mainAxisSize: MainAxisSize.min,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Center(
          child: Text(
            'login_to_continue'.tr,
            style: MyTextStyle.styleBold.copyWith(fontSize: 20),
          ),
        ),
        const SizedBox(height: 24),
        _buildPhoneField(),
        const SizedBox(height: 24),
        PrimaryButton(
          text: 'login'.tr,
          onTap: () => _handleLoginSubmit(),
          isLoading: isLoading.value,
        ),
        const SizedBox(height: 16),
        Center(
          child: TextButton(
            onPressed: toggleMode,
            child: Text(
              'new_user_register'.tr,
              style:
                  MyTextStyle.meduimBold.copyWith(color: AppColor.primaryColor),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildSignupForm() {
    return Column(
      mainAxisSize: MainAxisSize.min,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Center(
          child: Text(
            'create_account'.tr,
            style: MyTextStyle.styleBold.copyWith(fontSize: 20),
          ),
        ),
        const SizedBox(height: 20),
        _buildNameFields(),
        const SizedBox(height: 16),
        _buildPhoneField(),
        const SizedBox(height: 24),
        PrimaryButton(
          text: 'sign_up'.tr,
          onTap: () => _handleSignupSubmit(),
          isLoading: isLoading.value,
        ),
        const SizedBox(height: 16),
        Center(
          child: TextButton(
            onPressed: toggleMode,
            child: Text(
              'already_have_account'.tr,
              style:
                  MyTextStyle.meduimBold.copyWith(color: AppColor.primaryColor),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildOtpVerification() {
    return Column(
      mainAxisSize: MainAxisSize.min,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Center(
          child: Text(
            'verify_phone'.tr,
            style: MyTextStyle.styleBold.copyWith(fontSize: 20),
          ),
        ),
        const SizedBox(height: 16),
        Text(
          'code_sent_to'.tr + ' +966${phoneController.text}',
          style: MyTextStyle.meduimBold,
        ),
        const SizedBox(height: 24),
        _buildOtpField(),
        const SizedBox(height: 24),
        PrimaryButton(
          text: 'verify'.tr,
          onTap: () => _verifyOtp(),
          isLoading: isLoading.value,
        ),
        const SizedBox(height: 16),
        Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            TextButton(
              onPressed: _resendCode,
              child: Text(
                'resend_code'.tr,
                style: MyTextStyle.meduimBold
                    .copyWith(color: AppColor.primaryColor),
              ),
            ),
            TextButton(
              onPressed: () {
                editingInfo.value = true;
                isVerifying.value = false;
              },
              child: Text(
                'edit_info'.tr,
                style: MyTextStyle.meduimBold
                    .copyWith(color: AppColor.primaryColor),
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildEditSignupInfo() {
    return Column(
      mainAxisSize: MainAxisSize.min,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Center(
          child: Text(
            'edit_information'.tr,
            style: MyTextStyle.styleBold.copyWith(fontSize: 20),
          ),
        ),
        const SizedBox(height: 20),
        _buildNameFields(),
        const SizedBox(height: 16),
        _buildPhoneField(),
        const SizedBox(height: 24),
        PrimaryButton(
          text: 'update_info'.tr,
          onTap: () => _updateSignupInfo(),
          isLoading: isLoading.value,
        ),
        const SizedBox(height: 16),
        Center(
          child: TextButton(
            onPressed: () {
              editingInfo.value = false;
              isVerifying.value = true;
            },
            child: Text(
              'back_to_verification'.tr,
              style:
                  MyTextStyle.meduimBold.copyWith(color: AppColor.primaryColor),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildAddressCollection() {
    return Column(
      mainAxisSize: MainAxisSize.min,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Center(
          child: Text(
            'add_delivery_address'.tr,
            style: MyTextStyle.styleBold.copyWith(fontSize: 20),
          ),
        ),
        const SizedBox(height: 16),
        Text(
          'we_need_your_address'.tr,
          style: MyTextStyle.meduimBold,
        ),
        const SizedBox(height: 20),
        if (address != null && address!.isNotEmpty)
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.grey.shade100,
              borderRadius: BorderRadius.circular(AppDimensions.borderRadius),
              border: Border.all(color: Colors.grey.shade300),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'current_location'.tr,
                  style: MyTextStyle.smallBold.copyWith(color: AppColor.grey),
                ),
                const SizedBox(height: 4),
                Text(
                  address!,
                  style: MyTextStyle.meduimBold,
                ),
                if (latitude != null && longitude != null)
                  Padding(
                    padding: const EdgeInsets.only(top: 8),
                    child: Text(
                      'Lat: ${latitude!.toStringAsFixed(6)}, Long: ${longitude!.toStringAsFixed(6)}',
                      style:
                          MyTextStyle.smallBold.copyWith(color: AppColor.grey),
                    ),
                  ),
              ],
            ),
          ),
        const SizedBox(height: 24),
        PrimaryButton(
          text: 'use_my_location'.tr,
          onTap: () => _getCurrentLocation(),
          isLoading: isLoading.value,
        ),
        const SizedBox(height: 16),
        OutlinedButton(
          onPressed: _showManualAddressDialog,
          style: OutlinedButton.styleFrom(
            minimumSize: const Size(double.infinity, 48),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(AppDimensions.borderRadius),
            ),
            side: BorderSide(color: AppColor.primaryColor),
          ),
          child: Text(
            'enter_manually'.tr,
            style:
                MyTextStyle.meduimBold.copyWith(color: AppColor.primaryColor),
          ),
        ),
        if (address != null && address!.isNotEmpty)
          Padding(
            padding: const EdgeInsets.only(top: 16),
            child: PrimaryButton(
              text: 'continue'.tr,
              onTap: () => _finalizeAuth(),
            ),
          ),
      ],
    );
  }

  Widget _buildNameFields() {
    return Row(
      children: [
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('first_name'.tr, style: MyTextStyle.meduimBold),
              const SizedBox(height: AppDimensions.smallSpacing),
              Container(
                height: AppDimensions.inputHeight,
                decoration: AppDecorations.inputContainer,
                child: TextField(
                  controller: firstNameController,
                  style: MyTextStyle.meduimBold,
                  decoration: InputDecoration(
                    hintText: 'first_name'.tr,
                    hintStyle:
                        MyTextStyle.bigCapiton.copyWith(color: AppColor.grey),
                    border: InputBorder.none,
                    contentPadding: const EdgeInsets.symmetric(horizontal: 16),
                  ),
                ),
              ),
            ],
          ),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('last_name'.tr, style: MyTextStyle.meduimBold),
              const SizedBox(height: AppDimensions.smallSpacing),
              Container(
                height: AppDimensions.inputHeight,
                decoration: AppDecorations.inputContainer,
                child: TextField(
                  controller: lastNameController,
                  style: MyTextStyle.meduimBold,
                  decoration: InputDecoration(
                    hintText: 'last_name'.tr,
                    hintStyle:
                        MyTextStyle.bigCapiton.copyWith(color: AppColor.grey),
                    border: InputBorder.none,
                    contentPadding: const EdgeInsets.symmetric(horizontal: 16),
                  ),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildPhoneField() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('phone_number'.tr, style: MyTextStyle.meduimBold),
        const SizedBox(height: AppDimensions.smallSpacing),
        Container(
          height: AppDimensions.inputHeight,
          decoration: AppDecorations.inputContainer,
          child: Row(
            children: [
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 12),
                height: AppDimensions.inputHeight,
                decoration: BoxDecoration(
                  color: Colors.grey.shade50,
                  borderRadius: const BorderRadius.only(
                    topLeft: Radius.circular(11),
                    bottomLeft: Radius.circular(11),
                  ),
                  border:
                      Border(right: BorderSide(color: Colors.grey.shade300)),
                ),
                child: Center(
                  child: Text(
                    "+966",
                    style: MyTextStyle.meduimBold,
                  ),
                ),
              ),
              Expanded(
                child: TextField(
                  controller: phoneController,
                  keyboardType: TextInputType.phone,
                  style: MyTextStyle.meduimBold,
                  decoration: InputDecoration(
                    hintText: '5XXXXXXXX',
                    hintStyle:
                        MyTextStyle.bigCapiton.copyWith(color: AppColor.grey),
                    border: InputBorder.none,
                    contentPadding: const EdgeInsets.symmetric(horizontal: 16),
                  ),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildOtpField() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('verification_code'.tr, style: MyTextStyle.meduimBold),
        const SizedBox(height: AppDimensions.smallSpacing),
        Container(
          height: AppDimensions.inputHeight,
          decoration: AppDecorations.inputContainer,
          child: TextField(
            controller: otpController,
            keyboardType: TextInputType.number,
            style: MyTextStyle.meduimBold,
            decoration: InputDecoration(
              hintText: '000000',
              hintStyle: MyTextStyle.bigCapiton.copyWith(color: AppColor.grey),
              border: InputBorder.none,
              contentPadding: const EdgeInsets.symmetric(horizontal: 16),
            ),
          ),
        ),
      ],
    );
  }

  void _handleLoginSubmit() async {
    if (phoneController.text.isEmpty || phoneController.text.length < 9) {
      showErrorSnackbar('error'.tr, 'please_enter_valid_phone'.tr);
      return;
    }

    isLoading.value = true;

    try {
      var response = await loginData.postData(phoneController.text);

      if (response['status'] == "success") {
        myServices.sharedPreferences
            .setString("userId", response['data']['user_id'].toString());
        isLoginFor.value = true;
        isVerifying.value = true;
      } else {
        showErrorSnackbar('error'.tr, 'login_failed'.tr);
      }
    } catch (e) {
      showErrorSnackbar('error'.tr, 'failed_to_send_code'.tr);
    } finally {
      isLoading.value = false;
    }
  }

  void _handleSignupSubmit() async {
    if (firstNameController.text.isEmpty || lastNameController.text.isEmpty) {
      showErrorSnackbar('error'.tr, 'please_enter_your_name'.tr);
      return;
    }

    if (phoneController.text.isEmpty || phoneController.text.length < 9) {
      showErrorSnackbar('error'.tr, 'please_enter_valid_phone'.tr);
      return;
    }

    isLoading.value = true;

    try {
      var response = await signupData.postData(
          "${firstNameController.text} ${lastNameController.text}",
          phoneController.text);

      if (response['status'] == "success") {
        myServices.sharedPreferences
            .setString("userId", response['data']['user_id'].toString());
        isLoginFor.value = false;
        isVerifying.value = true;
      } else {
        Get.defaultDialog(
            title: "warning".tr, middleText: "phone_number_already_exist".tr);
      }
    } catch (e) {
      showErrorSnackbar('error'.tr, 'failed_to_register'.tr);
    } finally {
      isLoading.value = false;
    }
  }

  void _updateSignupInfo() async {
    if (firstNameController.text.isEmpty || lastNameController.text.isEmpty) {
      showErrorSnackbar('error'.tr, 'please_enter_your_name'.tr);
      return;
    }

    if (phoneController.text.isEmpty || phoneController.text.length < 9) {
      showErrorSnackbar('error'.tr, 'please_enter_valid_phone'.tr);
      return;
    }

    isLoading.value = true;

    try {
      var response = await signupData.postData(
          "${firstNameController.text} ${lastNameController.text}",
          phoneController.text);

      if (response['status'] == "success") {
        editingInfo.value = false;
        isVerifying.value = true;
        showSuccessSnackbar('success'.tr, 'information_updated'.tr);
      } else {
        Get.defaultDialog(
            title: "warning".tr, middleText: "phone_number_already_exist".tr);
      }
    } catch (e) {
      showErrorSnackbar('error'.tr, 'failed_to_update_info'.tr);
    } finally {
      isLoading.value = false;
    }
  }

  void _verifyOtp() async {
    if (otpController.text.isEmpty || otpController.text.length < 4) {
      showErrorSnackbar('error'.tr, 'please_enter_valid_code'.tr);
      return;
    }

    isLoading.value = true;

    try {
      var response;

      if (isLoginFor.value) {
        response = await signupData.loginWithOtp(
            otpController.text, phoneController.text);
      } else {
        response = await signupData.getVerfiyCode(
            otpController.text, phoneController.text);
      }

      if (response['status'] == "success") {
        await myServices.sharedPreferences.setBool("isLogin", true);

        // Get location automatically after OTP verification
        await _getCurrentLocation();

        if (isLoginMode.value) {
          bool hasAddress = await _checkIfUserHasAddress();
          if (!hasAddress) {
            needsAddress.value = true;
            isVerifying.value = false;
          } else {
            _finalizeAuth();
          }
        } else {
          needsAddress.value = true;
          isVerifying.value = false;
        }
      } else {
        Get.defaultDialog(
            title: "warning".tr, middleText: "verfiy_code_not_match".tr);
      }
    } catch (e) {
      showErrorSnackbar('error'.tr, 'invalid_verification_code'.tr);
    } finally {
      isLoading.value = false;
    }
  }

  Future<void> _getCurrentLocation() async {
    isLoading.value = true;

    try {
      // Check permission
      LocationPermission permission = await Geolocator.checkPermission();

      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
      }

      if (permission == LocationPermission.deniedForever) {
        showErrorSnackbar('error'.tr, 'location_permission_denied'.tr);
        isLoading.value = false;
        return;
      }

      // Get current position
      position = await Geolocator.getCurrentPosition();
      latitude = position!.latitude;
      longitude = position!.longitude;

      // Create camera position
      cameraPosition = CameraPosition(
        target: LatLng(position!.latitude, position!.longitude),
        zoom: 12.4746,
      );

      // Add marker
      addMarkers(LatLng(position!.latitude, position!.longitude));

      // Get address from coordinates
      List<Placemark> placemarks =
          await placemarkFromCoordinates(latitude!, longitude!);

      if (placemarks.isNotEmpty) {
        Placemark place = placemarks[0];
        city = place.locality;
        street = place.street;
        address =
            '${place.street}, ${place.subLocality}, ${place.locality}, ${place.country}';
      } else {
        address = 'location_found'.tr;
      }

      update();
    } catch (e) {
      showErrorSnackbar('error'.tr, 'failed_to_get_location'.tr);
    } finally {
      isLoading.value = false;
    }
  }

  void addMarkers(LatLng latLng) {
    markers.clear();
    markers.add(Marker(markerId: const MarkerId("1"), position: latLng));
    latitude = latLng.latitude;
    longitude = latLng.longitude;
    update();
  }

  void _showManualAddressDialog() {
    final TextEditingController addressController = TextEditingController();
    final TextEditingController cityController = TextEditingController();
    final TextEditingController streetController = TextEditingController();

    // Pre-fill with existing values if available
    if (city != null) cityController.text = city!;
    if (street != null) streetController.text = street!;
    if (address != null) addressController.text = address!;

    Get.dialog(
      Dialog(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(AppDimensions.borderRadius),
        ),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'enter_address'.tr,
                style: MyTextStyle.styleBold.copyWith(fontSize: 18),
              ),
              const SizedBox(height: 16),

              // City field
              Text('city'.tr, style: MyTextStyle.meduimBold),
              const SizedBox(height: 8),
              Container(
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius:
                      BorderRadius.circular(AppDimensions.borderRadius),
                  border: Border.all(color: Colors.grey.shade300),
                ),
                child: TextField(
                  controller: cityController,
                  decoration: InputDecoration(
                    hintText: 'city_hint'.tr,
                    contentPadding: const EdgeInsets.all(16),
                    border: InputBorder.none,
                  ),
                ),
              ),
              const SizedBox(height: 12),

              // Street field
              Text('street'.tr, style: MyTextStyle.meduimBold),
              const SizedBox(height: 8),
              Container(
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius:
                      BorderRadius.circular(AppDimensions.borderRadius),
                  border: Border.all(color: Colors.grey.shade300),
                ),
                child: TextField(
                  controller: streetController,
                  decoration: InputDecoration(
                    hintText: 'street_hint'.tr,
                    contentPadding: const EdgeInsets.all(16),
                    border: InputBorder.none,
                  ),
                ),
              ),
              const SizedBox(height: 12),

              // Full address field
              Text('full_address'.tr, style: MyTextStyle.meduimBold),
              const SizedBox(height: 8),
              Container(
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius:
                      BorderRadius.circular(AppDimensions.borderRadius),
                  border: Border.all(color: Colors.grey.shade300),
                ),
                child: TextField(
                  controller: addressController,
                  maxLines: 3,
                  decoration: InputDecoration(
                    hintText: 'address_hint'.tr,
                    contentPadding: const EdgeInsets.all(16),
                    border: InputBorder.none,
                  ),
                ),
              ),
              const SizedBox(height: 24),
              PrimaryButton(
                text: 'save'.tr,
                onTap: () {
                  if (addressController.text.isNotEmpty &&
                      cityController.text.isNotEmpty &&
                      streetController.text.isNotEmpty) {
                    city = cityController.text;
                    street = streetController.text;
                    address = addressController.text;
                    // Default lat/long for manual entry if not already set
                    latitude = latitude ?? 0.0;
                    longitude = longitude ?? 0.0;
                    update();
                    Get.back();
                  } else {
                    showErrorSnackbar('error'.tr, 'please_complete_address'.tr);
                  }
                },
              ),
            ],
          ),
        ),
      ),
    );
  }

  Future<bool> _checkIfUserHasAddress() async {
    String userId = myServices.sharedPreferences.getString("userId") ?? "";
    if (userId.isEmpty) return false;

    try {
      var response = await addressData.getData(userId);
      return response['status'] == "success" &&
          response['data'] != null &&
          response['data'].isNotEmpty;
    } catch (e) {
      print("Error checking user address: $e");
      return false;
    }
  }

  void _resendCode() async {
    isLoading.value = true;

    try {
      // Call your resend code API here
      if (isLoginFor.value) {
        await loginData.postData(phoneController.text);
      } else {
        await signupData.postData(
            "${firstNameController.text} ${lastNameController.text}",
            phoneController.text);
      }

      showSuccessSnackbar('success'.tr, 'code_resent_successfully'.tr);
    } catch (e) {
      showErrorSnackbar('error'.tr, 'failed_to_resend_code'.tr);
    } finally {
      isLoading.value = false;
    }
  }

  void _finalizeAuth() async {
    isLoading.value = true;

    try {
      // Save user data
      myServices.sharedPreferences.setBool("isLogin", true);

      // Save address to database if we have one
      if (address != null && address!.isNotEmpty) {
        String userId = myServices.sharedPreferences.getString("userId") ?? "";

        if (userId.isNotEmpty) {
          var addressName = "home";

          // Save address to backend
          var response = await addressData.addData(
              userId,
              addressName,
              city ?? "",
              street ?? "",
              latitude.toString(),
              longitude.toString());

          if (response['status'] == "success") {
            // Cache address locally
            myServices.sharedPreferences.setString("userAddress", address!);
            myServices.sharedPreferences
                .setString("userLat", latitude.toString());
            myServices.sharedPreferences
                .setString("userLng", longitude.toString());
          } else {
            showErrorSnackbar('warning'.tr, 'failed_to_save_address'.tr);
          }
        }
      }

      // Execute callback if provided
      if (onAuthSuccess != null) {
        onAuthSuccess!();
      }

      // Close dialog and show success message
      _dismissDialog();
      showSuccessSnackbar('success'.tr, 'login_successful'.tr);
    } catch (e) {
      showErrorSnackbar('error'.tr, 'authentication_failed'.tr);
    } finally {
      isLoading.value = false;
    }
  }

  void showErrorSnackbar(String title, String message) {
    Get.snackbar(
      title,
      message,
      backgroundColor: Colors.red.withOpacity(0.1),
      colorText: Colors.red,
      snackPosition: SnackPosition.BOTTOM,
    );
  }

  void showSuccessSnackbar(String title, String message) {
    Get.snackbar(
      title,
      message,
      backgroundColor: Colors.green.withOpacity(0.1),
      colorText: Colors.green,
      snackPosition: SnackPosition.BOTTOM,
    );
  }
}
import 'dart:ui';

import 'package:ecom_modwir/controller/home_controller.dart';
import 'package:ecom_modwir/core/constant/apptheme.dart';
import 'package:ecom_modwir/core/constant/routes.dart';
import 'package:ecom_modwir/core/services/services.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:get/get.dart';

class SettingsController extends GetxController {
  MyServices myServices = Get.find();

  ThemeData appTheme = ThemeData();

  logout() {
    // String userId = myServices.sharedPreferences.getString("userId")!;

    // FirebaseMessaging.instance.subscribeToTopic("users");
    // FirebaseMessaging.instance.unsubscribeFromTopic("users$userId");
    myServices.sharedPreferences.clear();
    Get.offAllNamed(AppRoute.homepage);
  }

  changeLang(String langcode) {
    Locale locale = Locale(langcode);
    myServices.sharedPreferences.setString("lang", langcode);
    appTheme = langcode == "ar" ? themeArabic : themeEnglish;
    Get.changeTheme(appTheme);
    Get.updateLocale(locale);
    Get.find<HomeControllerImp>().getdata();

    update();
  }

  // @override
  // void onInit() {
  //   super.onInit();
  // }
}

]

and here are the others :
[
  import 'package:ecom_modwir/controller/service_items_controller.dart';
import 'package:ecom_modwir/core/class/handlingdataview.dart';
import 'package:ecom_modwir/core/class/statusrequest.dart';
import 'package:ecom_modwir/core/constant/color.dart';
import 'package:ecom_modwir/core/constant/keys.dart';
import 'package:ecom_modwir/core/constant/textstyle_manger.dart';
import 'package:ecom_modwir/view/screen/orders/service_order_forms.dart';
import 'package:ecom_modwir/view/widget/services/cars/car_display_card.dart';
import 'package:ecom_modwir/view/widget/services/cars/car_selection_widgets.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';

class ServicesDisplayPage extends StatelessWidget {
  const ServicesDisplayPage({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('make_an_order'.tr, style: MyTextStyle.styleBold),
        centerTitle: true,
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: () =>
                Get.find<ServicesDisplayController>().initializeData(),
          ),
        ],
      ),
      body: GetBuilder<ServicesDisplayController>(
        builder: (controller) => HandlingDataView(
          statusRequest: controller.statusRequest,
          widget: _MainContent(controller: controller),
        ),
      ),
    );
  }
}

class _MainContent extends StatelessWidget {
  final ServicesDisplayController controller;

  const _MainContent({required this.controller});

  @override
  Widget build(BuildContext context) {
    return CustomScrollView(
      slivers: [
        _buildHeaderSection(),

        // Conditional sliver section

        if (controller.userVehicles.isNotEmpty)
          SliverToBoxAdapter(
            child: CarInfoWidget(controller: controller),
          )
        else
          _buildCarSelectionSection(context),

        _buildServicesHeader(),

        _buildServicesList(),

        _buildServicesOrderForms(),
      ],
    );
  }

  SliverPadding _buildHeaderSection() {
    return SliverPadding(
      padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 16),
      sliver: SliverToBoxAdapter(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('make_an_order'.tr,
                style: MyTextStyle.styleBold.copyWith(fontSize: 24)),
            const SizedBox(height: 8),
            Text('select_your_car'.tr,
                style: MyTextStyle.bigCapiton.copyWith(color: AppColor.grey)),
          ],
        ),
      ),
    );
  }

  SliverToBoxAdapter _buildCarSelectionSection(BuildContext context) {
    return SliverToBoxAdapter(
      child: controller.statusRequest == StatusRequest.loading
          ? const Center(child: CircularProgressIndicator())
          : Column(
              children: [
                if (controller.carMakes.isNotEmpty)
                  CarMakeSlider(controller: controller),
                if (controller.selectedMakeIndex != -1 &&
                    controller.selectedModels.isNotEmpty)
                  CarModelSlider(controller: controller),
              ],
            ),
    );
  }

  SliverPadding _buildServicesHeader() {
    return SliverPadding(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      sliver: SliverToBoxAdapter(
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(
              'available_services'.tr,
              style: MyTextStyle.styleBold.copyWith(fontSize: 20),
            ),
            _buildSortDropdown(),
          ],
        ),
      ),
    );
  }

  Widget _buildSortDropdown() {
    return PopupMenuButton<PriceSort>(
      icon: Icon(Icons.filter_list_rounded, color: AppColor.primaryColor),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      onSelected: (sort) => controller.sortServicesByPrice(sort),
      itemBuilder: (context) => [
        PopupMenuItem(
          value: PriceSort.lowToHigh,
          child: Row(
            children: [
              Icon(Icons.arrow_upward_rounded, size: 18, color: AppColor.grey2),
              const SizedBox(width: 8),
              Text('low_to_high'.tr, style: MyTextStyle.smallBold),
            ],
          ),
        ),
        PopupMenuItem(
          value: PriceSort.highToLow,
          child: Row(
            children: [
              Icon(Icons.arrow_downward_rounded,
                  size: 18, color: AppColor.grey2),
              const SizedBox(width: 8),
              Text('high_to_low'.tr, style: MyTextStyle.smallBold),
            ],
          ),
        ),
      ],
    );
  }

  SliverList _buildServicesList() {
    return SliverList(
      delegate: SliverChildBuilderDelegate(
        (context, index) => SubServiceItem(
          service: controller.serviceItems[index],
          index: index,
          onSelected: controller.selectService,
        ),
        childCount: controller.serviceItems.length,
      ),
    );
  }

  ServiceOrderForm _buildServicesOrderForms() {
    return ServiceOrderForm(controller: controller);
  }
}
import 'package:ecom_modwir/controller/service_items_controller.dart';
import 'package:ecom_modwir/core/constant/color.dart';
import 'package:ecom_modwir/core/constant/textstyle_manger.dart';
import 'package:ecom_modwir/data/model/cars/make_model.dart';
import 'package:ecom_modwir/data/model/services/note_services_model.dart';
import 'package:ecom_modwir/data/model/services/sub_services_model.dart';
import 'package:ecom_modwir/linkapi.dart';
import 'package:ecom_modwir/view/widget/mytextbutton.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'selection_modal.dart';

// Car Make Slider
class CarMakeSlider extends StatelessWidget {
  final ServicesDisplayController controller;

  const CarMakeSlider({super.key, required this.controller});

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        SectionHeader(
          title: 'make'.tr,
          showAllButton: controller.carMakes.length > 10,
          onShowAll: () => showSelectionModal(
            context,
            'all_makes'.tr,
            controller.carMakes,
            controller.selectCarMake,
          ),
        ),
        SizedBox(
          height: 75,
          child: ListView.builder(
            scrollDirection: Axis.horizontal,
            itemCount: controller.carMakes.take(10).length,
            itemBuilder: (context, index) => CarMakeItem(
              make: controller.carMakes[index],
              isSelected: controller.selectedMakeIndex == index,
              onTap: () => controller.selectCarMake(index),
            ),
          ),
        ),
      ],
    );
  }
}

// Car Model Slider
class CarModelSlider extends StatelessWidget {
  final ServicesDisplayController controller;

  const CarModelSlider({super.key, required this.controller});

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        SectionHeader(
          title: 'model'.tr,
          showAllButton: controller.selectedModels.length > 1,
          onShowAll: () => showSelectionModal(
            context,
            'all_models'.tr,
            controller.selectedModels,
            controller.selectCarModel,
          ),
        ),
        Padding(
          padding: const EdgeInsets.all(8.0),
          child: SizedBox(
            height: 30,
            child: ListView.builder(
              scrollDirection: Axis.horizontal,
              itemCount: controller.selectedModels.take(10).length,
              itemBuilder: (context, index) => CarModelItem(
                model: controller.selectedModels[index],
                isSelected: controller.selectedModelIndex == index,
                onTap: () => controller.selectCarModel(index),
                lang: controller.lang,
              ),
            ),
          ),
        ),
      ],
    );
  }
}

// Shared Widgets
class SectionHeader extends StatelessWidget {
  final String title;
  final bool showAllButton;
  final VoidCallback onShowAll;

  const SectionHeader({
    super.key,
    required this.title,
    required this.showAllButton,
    required this.onShowAll,
  });

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 20),
      child: Row(
        children: [
          Text(title, style: MyTextStyle.smallBold),
          const Spacer(),
          if (showAllButton)
            MyTextButton(
              text: 'show_more'.tr,
              ontap: onShowAll,
              paddinghorizontal: 0,
              paddingvertical: 0,
              textStyle: MyTextStyle.textButtonTow.copyWith(
                fontSize: 11,
              ),
            ),
        ],
      ),
    );
  }
}

class CarMakeItem extends StatelessWidget {
  final CarMake make;
  final bool isSelected;
  final VoidCallback onTap;

  const CarMakeItem({
    super.key,
    required this.make,
    required this.isSelected,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: onTap,
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 300),
        width: 80,
        margin: const EdgeInsets.symmetric(horizontal: 8),
        decoration: BoxDecoration(
          color: isSelected
              ? AppColor.primaryColor.withOpacity(0.1)
              : AppColor.white,
          border: Border.all(
            color: isSelected ? AppColor.primaryColor : Colors.transparent,
            width: 2,
          ),
          borderRadius: BorderRadius.circular(12),
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Container(
              width: 60,
              height: 60,
              decoration: BoxDecoration(
                color: AppColor.white,
                borderRadius: BorderRadius.circular(8),
              ),
              child: make.logo!.isEmpty
                  ? MakeName(name: make.name)
                  : ClipRRect(
                      borderRadius: BorderRadius.circular(8),
                      child: Image.network(
                        "${AppLink.carMakeLogo}/${make.logo}",
                        fit: BoxFit.contain,
                        errorBuilder: (_, __, ___) => MakeName(name: make.name),
                      ),
                    ),
            ),
          ],
        ),
      ),
    );
  }
}

class CarModelItem extends StatelessWidget {
  final CarModel model;
  final bool isSelected;
  final VoidCallback onTap;
  final String lang;

  const CarModelItem({
    super.key,
    required this.model,
    required this.isSelected,
    required this.onTap,
    required this.lang,
  });

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: onTap,
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 200),
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 0),
        margin: const EdgeInsets.symmetric(horizontal: 8),
        decoration: BoxDecoration(
          color: isSelected
              ? AppColor.secondaryColor.withOpacity(0.1)
              : AppColor.white,
          border: Border.all(
            color: isSelected ? AppColor.secondaryColor : Colors.grey.shade300,
          ),
          borderRadius:
              const BorderRadius.only(topLeft: Radius.elliptical(10, 10)),
        ),
        child: Text(
          model.name[lang] ?? '',
          style: MyTextStyle.smallBold.copyWith(
            color: isSelected ? AppColor.secondaryColor : AppColor.blackColor,
          ),
        ),
      ),
    );
  }
}

class MakeName extends StatelessWidget {
  final Map<String, String> name;

  const MakeName({super.key, required this.name});

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Text(name['en'] ?? 'N/A', style: MyTextStyle.smallBold, maxLines: 1),
        if (name.containsKey('ar'))
          Text(name['ar']!,
              style: MyTextStyle.smallBold.copyWith(fontFamily: 'ArbFont'),
              textDirection: TextDirection.rtl,
              maxLines: 1),
      ],
    );
  }
}

class SubServiceItem extends StatefulWidget {
  final SubServiceModel service;
  final int index;
  final Function(int) onSelected;

  const SubServiceItem({
    super.key,
    required this.service,
    required this.index,
    required this.onSelected,
  });

  @override
  State<SubServiceItem> createState() => _SubServiceItemState();
}

class _SubServiceItemState extends State<SubServiceItem> {
  bool _isExpanded = false;

  @override
  Widget build(BuildContext context) {
    return AnimatedContainer(
      duration: const Duration(milliseconds: 200),
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 6),
      decoration: BoxDecoration(
        color: AppColor.white,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: widget.service.isSelected
              ? AppColor.primaryColor
              : Colors.grey.shade200,
          width: 1.5,
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: InkWell(
        borderRadius: BorderRadius.circular(12),
        onTap: _handleTap,
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildHeader(),
              const SizedBox(height: 12),
              _buildContent(),
            ],
          ),
        ),
      ),
    );
  }

  void _handleTap() {
    setState(() => _isExpanded = !_isExpanded);
    widget.onSelected(widget.index);
  }

  Widget _buildHeader() {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Expanded(
          child: Text(
            widget.service.name ?? "",
            style: MyTextStyle.meduimBold.copyWith(
              fontSize: 16,
              color: AppColor.grey2,
            ),
          ),
        ),
        Column(
          crossAxisAlignment: CrossAxisAlignment.end,
          children: [
            Text(
              "${widget.service.price} SR",
              style: MyTextStyle.meduimBold.copyWith(
                fontSize: 16,
                color: AppColor.primaryColor,
              ),
            ),
            if (widget.service.isSelected)
              Icon(Icons.check_circle, size: 18, color: AppColor.primaryColor),
          ],
        ),
      ],
    );
  }

  Widget _buildContent() {
    return AnimatedSize(
      duration: const Duration(milliseconds: 200),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          if (widget.service.notes.isNotEmpty ?? false) ...[
            _buildNotePreview(),
            if (_isExpanded) ...[
              const SizedBox(height: 12),
              ..._buildAllNotes(),
            ],
          ],
          if (_showSeeMoreButton()) _buildSeeMoreButton(),
        ],
      ),
    );
  }

  Widget _buildNotePreview() {
    return Text(
      widget.service.notes.first.content ?? "",
      maxLines: _isExpanded ? null : 1,
      overflow: _isExpanded ? null : TextOverflow.ellipsis,
      style: MyTextStyle.bigCapiton.copyWith(
        fontSize: 14,
        fontFamily: "El_Messiri",
        color: AppColor.grey2,
      ),
    );
  }

  List<Widget> _buildAllNotes() {
    return widget.service.notes
        .sublist(1)
        .map((note) => Padding(
              padding: const EdgeInsets.only(top: 8),
              child: Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Icon(Icons.circle, size: 8, color: AppColor.primaryColor),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      note.content ?? "",
                      style: MyTextStyle.bigCapiton.copyWith(
                        fontSize: 14,
                        fontFamily: "El_Messiri",
                        color: AppColor.grey2,
                      ),
                    ),
                  ),
                ],
              ),
            ))
        .toList();
  }

  bool _showSeeMoreButton() {
    return widget.service.notes.length > 1 && !_isExpanded;
  }

  Widget _buildSeeMoreButton() {
    return Align(
      alignment: Alignment.centerRight,
      child: GestureDetector(
        onTap: _handleTap,
        child: Padding(
          padding: const EdgeInsets.only(top: 8),
          child: Text(
            'see_more_notes'.tr,
            style: MyTextStyle.smallBold.copyWith(
              color: AppColor.primaryColor,
              decoration: TextDecoration.underline,
            ),
          ),
        ),
      ),
    );
  }
}

class PriceBadge extends StatelessWidget {
  final String price;

  const PriceBadge({super.key, required this.price});

  @override
  Widget build(BuildContext context) {
    return Container(
      width: 60,
      height: 60,
      decoration: BoxDecoration(
        color: AppColor.primaryColor.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Center(
        child: Text('$price SR',
            style:
                MyTextStyle.meduimBold.copyWith(color: AppColor.primaryColor)),
      ),
    );
  }
}

class NoteItem extends StatelessWidget {
  final ServiceNote note;

  const NoteItem({super.key, required this.note});

  @override
  Widget build(BuildContext context) {
    return ListTile(
      leading: Icon(Icons.circle, size: 12, color: AppColor.primaryColor),
      title: Text(note.content ?? "", style: MyTextStyle.bigCapiton),
    );
  }
}
import 'package:ecom_modwir/controller/auth/auth_service.dart';
import 'package:ecom_modwir/core/constant/app_dimensions.dart';
import 'package:ecom_modwir/view/widget/services/cars/saudi_license_plate.dart';
import 'package:ecom_modwir/view/widget/services/cars/primary_button.dart';
import 'package:ecom_modwir/view/widget/services/cars/scroll_year.dart';
import 'package:flutter/material.dart';
import 'package:ecom_modwir/controller/service_items_controller.dart';
import 'package:ecom_modwir/core/class/statusrequest.dart';
import 'package:ecom_modwir/core/constant/color.dart';
import 'package:ecom_modwir/core/constant/textstyle_manger.dart';
import 'package:get/get.dart';
import 'dart:io';
import 'package:image_picker/image_picker.dart';

class ServiceOrderForm extends StatelessWidget {
  final ServicesDisplayController controller;
  final AuthService authService = Get.put(AuthService());

  ServiceOrderForm({super.key, required this.controller});

  @override
  Widget build(BuildContext context) {
    return SliverToBoxAdapter(
      child: GetBuilder<ServicesDisplayController>(
        builder: (controller) => Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'additional_requirements'.tr,
                style: MyTextStyle.styleBold.copyWith(fontSize: 18),
              ),
              const SizedBox(height: 12),
              _NotesField(controller: controller),
              const SizedBox(height: 16),
              _AttachmentSection(controller: controller),
              const SizedBox(height: 24),
              PrimaryButton(
                text: 'checkout'.tr,
                onTap: () => _handleSubmit(context, controller),
                isLoading: controller.statusRequest == StatusRequest.loading,
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _handleSubmit(
      BuildContext context, ServicesDisplayController controller) {
    // Check if any service is selected
    bool isServiceSelected =
        controller.serviceItems.any((service) => service.isSelected);

    if (!isServiceSelected) {
      Get.snackbar(
        'error'.tr,
        'please_select_service'.tr,
        backgroundColor: Colors.red.withOpacity(0.1),
        colorText: Colors.red,
        snackPosition: SnackPosition.BOTTOM,
      );
      return;
    }

    // Check if car is selected
    if (controller.selectedMakeIndex == -1 ||
        controller.selectedModelIndex == -1) {
      Get.snackbar(
        'error'.tr,
        'select_your_car'.tr,
        backgroundColor: Colors.red.withOpacity(0.1),
        colorText: Colors.red,
        snackPosition: SnackPosition.BOTTOM,
      );
      return;
    }

    // Check if user is logged in
    bool isLoggedIn =
        controller.myServices.sharedPreferences.getBool("isLogin") ?? false;

    if (isLoggedIn) {
      _showOrderDetailsSheet(context, controller);
    } else {
      // Show auth dialog and proceed with order after successful auth
      authService.showAuthDialog(context, onSuccess: () {
        _showOrderDetailsSheet(context, controller);
      });
    }
  }

  void _showOrderDetailsSheet(
      BuildContext context, ServicesDisplayController controller) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => FractionallySizedBox(
        heightFactor: 0.85,
        child: Container(
          decoration: const BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
          ),
          child: SingleChildScrollView(
            padding: const EdgeInsets.all(16.0),
            child: _UserCarDetailsForm(controller: controller),
          ),
        ),
      ),
    );
  }
}

class _NotesField extends StatelessWidget {
  final ServicesDisplayController controller;

  const _NotesField({required this.controller});

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(AppDimensions.borderRadius),
        border: Border.all(color: Colors.grey.shade300),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: TextField(
        controller: controller.notesController,
        maxLines: 4,
        decoration: InputDecoration(
          hintText: 'additional_notes_hint'.tr,
          contentPadding: const EdgeInsets.all(16),
          border: InputBorder.none,
        ),
      ),
    );
  }
}

class _AttachmentSection extends StatelessWidget {
  final ServicesDisplayController controller;

  const _AttachmentSection({required this.controller});

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'attachments'.tr,
          style: MyTextStyle.styleBold,
        ),
        const SizedBox(height: AppDimensions.smallSpacing),
        Container(
          width: double.infinity,
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.grey.shade100,
            borderRadius: BorderRadius.circular(AppDimensions.borderRadius),
            border: Border.all(color: Colors.grey.shade300),
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              _buildAttachmentsList(),
              const SizedBox(height: 16),
              _buildAttachButton(context),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildAttachmentsList() {
    if (controller.attachments.isEmpty) {
      return Padding(
        padding: const EdgeInsets.symmetric(vertical: 16),
        child: Text(
          'empty'.tr,
          style: MyTextStyle.bigCapiton.copyWith(color: AppColor.grey),
          textAlign: TextAlign.center,
        ),
      );
    }

    // Limit the number of visible attachments
    final visibleAttachments = controller.attachments.length > 3
        ? controller.attachments.sublist(0, 3)
        : controller.attachments;

    return Column(
      children: [
        ...visibleAttachments.map((file) {
          return Padding(
            padding: const EdgeInsets.only(bottom: 8),
            child: Row(
              children: [
                Icon(Icons.insert_drive_file, color: AppColor.primaryColor),
                const SizedBox(width: 8),
                Expanded(
                  child: Text(
                    _getFileName(file),
                    style: MyTextStyle.smallBold,
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                  ),
                ),
                IconButton(
                  padding: EdgeInsets.zero,
                  constraints: const BoxConstraints(),
                  icon: const Icon(Icons.close, size: 18),
                  onPressed: () => controller.removeAttachment(file),
                ),
              ],
            ),
          );
        }).toList(),
        if (controller.attachments.length > 3)
          Padding(
            padding: const EdgeInsets.only(top: 4),
            child: Text(
              '+ ${controller.attachments.length - 3} more',
              style: MyTextStyle.smallBold.copyWith(color: AppColor.grey),
            ),
          ),
      ],
    );
  }

  String _getFileName(File file) {
    try {
      final path = file.path;
      return path.split('/').last;
    } catch (e) {
      return 'file';
    }
  }

  Widget _buildAttachButton(BuildContext context) {
    return InkWell(
      onTap: () => _showAttachmentOptions(context),
      child: Container(
        padding: const EdgeInsets.symmetric(vertical: 12),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(8),
          border: Border.all(color: AppColor.primaryColor.withOpacity(0.5)),
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.attach_file, color: AppColor.primaryColor),
            const SizedBox(width: 8),
            Text(
              'attach_files'.tr,
              style:
                  MyTextStyle.smallBold.copyWith(color: AppColor.primaryColor),
            ),
          ],
        ),
      ),
    );
  }

  void _showAttachmentOptions(BuildContext context) {
    showModalBottomSheet(
      context: context,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) => SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              ListTile(
                leading: const Icon(Icons.camera_alt),
                title: Text('camera'.tr),
                onTap: () {
                  Navigator.pop(context);
                  controller.pickAttachment(ImageSource.camera);
                },
              ),
              ListTile(
                leading: const Icon(Icons.photo_library),
                title: Text('gallery'.tr),
                onTap: () {
                  Navigator.pop(context);
                  controller.pickAttachment(ImageSource.gallery);
                },
              ),
              ListTile(
                leading: const Icon(Icons.file_copy),
                title: Text('document'.tr),
                onTap: () {
                  Navigator.pop(context);
                  controller.pickDocument();
                },
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class _UserCarDetailsForm extends StatelessWidget {
  final ServicesDisplayController controller;

  const _UserCarDetailsForm({required this.controller});

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      mainAxisSize: MainAxisSize.min,
      children: [
        Center(
          child: Container(
            width: 40,
            height: 4,
            margin: const EdgeInsets.only(bottom: 16),
            decoration: BoxDecoration(
              color: Colors.grey[300],
              borderRadius: BorderRadius.circular(2),
            ),
          ),
        ),
        Text(
          'car_details'.tr,
          style: MyTextStyle.styleBold.copyWith(fontSize: 20),
        ),
        const SizedBox(height: 24),
        ModernSaudiLicensePlate(),
        const SizedBox(height: 16),
        Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('year'.tr, style: MyTextStyle.meduimBold),
            const SizedBox(height: 8),
            YearScrollWheel(
              scrollController: controller.scrollController,
              selectedYear: controller.selectedYear,
              onYearChanged: (year) => controller.updateYear(year),
            ),
          ],
        ),
        const SizedBox(height: 24),
        _buildOrderSummary(),
        const SizedBox(height: 32),
        PrimaryButton(
          text: 'checkout'.tr,
          onTap: () {
            controller.completeOrder();
            Navigator.pop(context);
          },
          isLoading: controller.statusRequest == StatusRequest.loading,
        ),
        const SizedBox(height: 16),
      ],
    );
  }

  Widget _buildOrderSummary() {
    // Null safety checks
    final selectedService = controller.serviceItems.isNotEmpty
        ? controller.serviceItems.firstWhere(
            (service) => service.isSelected,
            orElse: () => controller.serviceItems.first,
          )
        : null;

    final selectedMake = controller.selectedMakeIndex >= 0 &&
            controller.selectedMakeIndex < controller.carMakes.length
        ? controller.carMakes[controller.selectedMakeIndex]
        : null;

    final selectedModel = controller.selectedModelIndex >= 0 &&
            controller.selectedModels.isNotEmpty &&
            controller.selectedModelIndex < controller.selectedModels.length
        ? controller.selectedModels[controller.selectedModelIndex]
        : null;

    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.grey.shade50,
        borderRadius: BorderRadius.circular(AppDimensions.borderRadius),
        border: Border.all(color: Colors.grey.shade200),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text('order_summary'.tr, style: MyTextStyle.styleBold),
          const SizedBox(height: 12),
          if (selectedService != null)
            _summaryItem(
              'service'.tr,
              selectedService.name ?? 'N/A',
            ),
          if (selectedService != null)
            _summaryItem(
              'price'.tr,
              "${selectedService.price ?? 0} SR",
              valueColor: AppColor.primaryColor,
            ),
          if (selectedMake != null && selectedModel != null)
            _summaryItem(
              'car'.tr,
              "${selectedMake.name[controller.lang] ?? ''} ${selectedModel.name[controller.lang] ?? ''}",
            ),
        ],
      ),
    );
  }

  Widget _summaryItem(String label, String value, {Color? valueColor}) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(label,
              style: MyTextStyle.meduimBold.copyWith(color: AppColor.grey2)),
          Text(
            value,
            style: MyTextStyle.meduimBold.copyWith(
              color: valueColor ?? AppColor.blackColor,
            ),
          ),
        ],
      ),
    );
  }
}
import 'package:ecom_modwir/data/model/cars/user_cars.dart';
import 'package:ecom_modwir/view/widget/services/cars/scroll_year.dart';
import 'package:ecom_modwir/view/widget/services/cars/selection_modal.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:ecom_modwir/controller/service_items_controller.dart';
import 'package:ecom_modwir/core/constant/color.dart';
import 'package:ecom_modwir/core/constant/textstyle_manger.dart';
import 'package:ecom_modwir/view/widget/services/cars/saudi_license_plate.dart';
import 'package:ecom_modwir/view/widget/services/cars/primary_button.dart';
import 'package:ecom_modwir/linkapi.dart';

class CarInfoWidget extends StatelessWidget {
  final ServicesDisplayController controller;

  const CarInfoWidget({super.key, required this.controller});

  @override
  Widget build(BuildContext context) {
    return GetBuilder<ServicesDisplayController>(
      builder: (controller) => controller.userVehicles.isNotEmpty
          ? _buildCarDisplaySection(context)
          : _buildCarInputForm(context),
    );
  }

  Widget _buildCarDisplaySection(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                'your_vehicles'.tr,
                style: MyTextStyle.styleBold.copyWith(fontSize: 18),
              ),
              TextButton.icon(
                onPressed: controller.toggleAddCarForm,
                icon: Icon(
                  controller.showAddCarForm
                      ? Icons.close
                      : Icons.add_circle_outline,
                  color: AppColor.primaryColor,
                ),
                label: Text(
                  controller.showAddCarForm
                      ? 'cancel'.tr
                      : 'add_another_car'.tr,
                  style: MyTextStyle.smallBold
                      .copyWith(color: AppColor.primaryColor),
                ),
              ),
            ],
          ),
        ),
        if (controller.showAddCarForm) _buildCarInputForm(context),
        if (!controller.showAddCarForm || controller.userVehicles.length > 1)
          SizedBox(
            height: 225,
            child: ListView.builder(
              scrollDirection: Axis.horizontal,
              padding: const EdgeInsets.symmetric(horizontal: 8),
              itemCount: controller.userVehicles.length,
              itemBuilder: (context, index) => VehicleCard(
                vehicle: controller.userVehicles[index],
                isSelected: controller.selectedVehicleIndex == index,
                onTap: () => controller.selectVehicle(index),
                onEdit: () => controller.editVehicle(index),
                onDelete: () => _showDeleteConfirmation(context, index),
              ),
            ),
          ),
      ],
    );
  }

  Widget _buildCarInputForm(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            controller.isEditingVehicle
                ? 'edit_vehicle'.tr
                : 'add_new_vehicle'.tr,
            style: MyTextStyle.meduimBold,
          ),
          const SizedBox(height: 16),
          Row(
            children: [
              Expanded(child: _buildMakeSelector(context)),
              const SizedBox(width: 12),
              Expanded(child: _buildModelSelector(context)),
            ],
          ),
          const SizedBox(height: 16),
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('year'.tr, style: MyTextStyle.meduimBold),
              const SizedBox(height: 8),
              YearScrollWheel(
                scrollController: controller.scrollController,
                selectedYear: controller.selectedYear ?? DateTime.now().year,
                onYearChanged: controller.updateYear,
              ),
            ],
          ),
          const SizedBox(height: 16),
          ModernSaudiLicensePlate(),
          const SizedBox(height: 24),
          PrimaryButton(
            text: controller.isEditingVehicle ? 'update'.tr : 'save'.tr,
            onTap: () => _handleSaveCar(context),
            isLoading: controller.isSavingVehicle,
          ),
        ],
      ),
    );
  }

  Widget _buildMakeSelector(BuildContext context) {
    final selectedMake = controller.selectedMakeIndex >= 0 &&
            controller.selectedMakeIndex < controller.carMakes.length
        ? controller
                .carMakes[controller.selectedMakeIndex].name[controller.lang] ??
            'N/A'
        : 'select_make'.tr;

    return GestureDetector(
      onTap: () => _showMakeSelection(context),
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(8),
          border: Border.all(color: Colors.grey.shade300),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.05),
              blurRadius: 4,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Expanded(
              child: Text(
                selectedMake,
                style: MyTextStyle.meduimBold,
                overflow: TextOverflow.ellipsis,
              ),
            ),
            Icon(Icons.arrow_drop_down, color: AppColor.grey2),
          ],
        ),
      ),
    );
  }

  Widget _buildModelSelector(BuildContext context) {
    final hasModels = controller.selectedModels.isNotEmpty;

    final selectedModel = hasModels &&
            controller.selectedModelIndex >= 0 &&
            controller.selectedModelIndex < controller.selectedModels.length
        ? controller.selectedModels[controller.selectedModelIndex]
                .name[controller.lang] ??
            'N/A'
        : 'select_model'.tr;

    return GestureDetector(
      onTap: hasModels ? () => _showModelSelection(context) : null,
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        decoration: BoxDecoration(
          color: hasModels ? Colors.white : Colors.grey.shade100,
          borderRadius: BorderRadius.circular(8),
          border: Border.all(color: Colors.grey.shade300),
          boxShadow: hasModels
              ? [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.05),
                    blurRadius: 4,
                    offset: const Offset(0, 2),
                  ),
                ]
              : null,
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Expanded(
              child: Text(
                selectedModel,
                style: MyTextStyle.meduimBold.copyWith(
                  color: hasModels ? AppColor.blackColor : AppColor.grey,
                ),
                overflow: TextOverflow.ellipsis,
              ),
            ),
            if (hasModels) Icon(Icons.arrow_drop_down, color: AppColor.grey2),
          ],
        ),
      ),
    );
  }

  void _showMakeSelection(BuildContext context) {
    showSelectionModal(
      context,
      'select_car_make'.tr,
      controller.carMakes,
      (index) => controller.selectCarMake(index),
    );
  }

  void _showModelSelection(BuildContext context) {
    if (controller.selectedModels.isNotEmpty) {
      showSelectionModal(
        context,
        'select_car_model'.tr,
        controller.selectedModels,
        (index) => controller.selectCarModel(index),
      );
    }
  }

  void _handleSaveCar(BuildContext context) {
    // Validate input

    if (controller.selectedMakeIndex == -1) {
      Get.snackbar('error'.tr, 'please_select_car_make'.tr);

      return;
    }

    if (controller.selectedModelIndex == -1) {
      Get.snackbar('error'.tr, 'please_select_car_model'.tr);

      return;
    }

    if (controller.selectedYear == null) {
      Get.snackbar('error'.tr, 'please_select_year'.tr);

      return;
    }

    // Get license plate data

    final licensePlateJson =
        controller.licensePlateController.getLicensePlateJson();

    if (licensePlateJson == '[{"en":"-","ar":"-"}]') {
      Get.snackbar('error'.tr, 'please_enter_license_plate'.tr);

      return;
    }

    // Save the car info

    controller.saveVehicle();
  }

  void _showDeleteConfirmation(BuildContext context, int index) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('delete_vehicle'.tr),
          content: Text('delete_vehicle_confirmation'.tr),
          actions: [
            TextButton(
              child: Text('cancel'.tr),
              onPressed: () => Navigator.of(context).pop(),
            ),
            TextButton(
              child: Text(
                'delete'.tr,
                style: const TextStyle(color: Colors.red),
              ),
              onPressed: () {
                Navigator.of(context).pop();

                controller.deleteVehicle(index);
              },
            ),
          ],
        );
      },
    );
  }
}

class VehicleCard extends StatelessWidget {
  final UserCarModel vehicle;

  final bool isSelected;

  final VoidCallback onTap;

  final VoidCallback onEdit;

  final VoidCallback onDelete;

  const VehicleCard({
    super.key,
    required this.vehicle,
    required this.isSelected,
    required this.onTap,
    required this.onEdit,
    required this.onDelete,
  });

  @override
  Widget build(BuildContext context) {
    final screenWidth = MediaQuery.of(context).size.width;

    return GestureDetector(
      onTap: onTap,
      child: Container(
        width: screenWidth * 0.85,
        margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 6),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(12),
          border: Border.all(
            color: isSelected ? AppColor.primaryColor : Colors.grey.shade200,
            width: isSelected ? 2 : 1,
          ),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.05),
              blurRadius: 8,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Stack(
          children: [
            _buildEditDeleteControls(),
            _buildCarLogo(),
            _buildCarDetails(),
            if (isSelected) _buildSelectedIndicator(),
          ],
        ),
      ),
    );
  }

  Widget _buildEditDeleteControls() {
    return Positioned(
      top: 8,
      left: 8,
      child: Row(
        children: [
          InkWell(
            onTap: onEdit,
            child: Container(
              padding: const EdgeInsets.all(4),
              decoration: BoxDecoration(
                color: AppColor.grey.withOpacity(0.1),
                shape: BoxShape.circle,
              ),
              child: Icon(Icons.edit_outlined, size: 18, color: AppColor.grey2),
            ),
          ),
          const SizedBox(width: 4),
          InkWell(
            onTap: onDelete,
            child: Container(
              padding: const EdgeInsets.all(4),
              decoration: BoxDecoration(
                color: Colors.red.withOpacity(0.1),
                shape: BoxShape.circle,
              ),
              child:
                  const Icon(Icons.delete_outline, size: 18, color: Colors.red),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCarLogo() {
    return Positioned(
      top: 8,
      right: 8,
      child: SizedBox(
        width: 40,
        height: 40,
        child: vehicle.makeLogo.isNotEmpty
            ? Image.network(
                "${AppLink.carMakeLogo}/${vehicle.makeLogo}",
                errorBuilder: (_, __, ___) => Icon(
                  Icons.directions_car,
                  size: 30,
                  color: AppColor.grey2,
                ),
              )
            : Icon(Icons.directions_car, size: 30, color: AppColor.grey2),
      ),
    );
  }

  Widget _buildCarDetails() {
    return Padding(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const SizedBox(height: 24),
          _buildBilingualText(
            '${vehicle.makeName} ${vehicle.modelName}',
            style: MyTextStyle.styleBold.copyWith(fontSize: 18, height: 1.2),
          ),
          const SizedBox(height: 4),
          _buildBilingualText(
            '${vehicle.year}',
            style: MyTextStyle.bigCapiton.copyWith(
              color: AppColor.grey2,
              fontSize: 14,
            ),
          ),
          const Spacer(),
          _DualLicensePlateDisplay(licensePlate: vehicle.licensePlate),
        ],
      ),
    );
  }

  Widget _buildBilingualText(String text, {required TextStyle style}) {
    return Text(
      text,
      style: style.copyWith(),
      maxLines: 2,
      overflow: TextOverflow.ellipsis,
    );
  }

  Widget _buildSelectedIndicator() {
    return Positioned(
      bottom: 8,
      right: 8,
      child: Container(
        padding: const EdgeInsets.all(4),
        decoration: BoxDecoration(
          color: AppColor.primaryColor,
          shape: BoxShape.circle,
        ),
        child: const Icon(Icons.check, size: 16, color: Colors.white),
      ),
    );
  }
}

class _DualLicensePlateDisplay extends StatelessWidget {
  final Map<String, dynamic>? licensePlate;

  const _DualLicensePlateDisplay({required this.licensePlate});

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        _LicensePlateRow(
          letters: licensePlate?['en']?.toString().split('-')[0] ?? '-',
          numbers: licensePlate?['en']?.toString().split('-')[1] ?? '-',
        ),
        const SizedBox(height: 4),
        _LicensePlateRow(
          letters: licensePlate?['ar']?.toString().split('-')[0] ?? '-',
          numbers: licensePlate?['ar']?.toString().split('-')[1] ?? '-',
        ),
      ],
    );
  }
}

class _LicensePlateRow extends StatelessWidget {
  final String letters;
  final String numbers;

  const _LicensePlateRow({
    required this.letters,
    required this.numbers,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        border: Border.all(color: AppColor.blackColor, width: 2),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Row(
        children: [
          Expanded(
            flex: 3,
            child: Padding(
              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
              child: Text(
                letters.trim(),
                style: MyTextStyle.styleBold.copyWith(
                  fontSize: 16,
                  letterSpacing: 1.5,
                ),
                textAlign: TextAlign.right,
                maxLines: 1,
                overflow: TextOverflow.ellipsis,
              ),
            ),
          ),
          Container(
            width: 2,
            height: 35,
            color: AppColor.blackColor,
            margin: const EdgeInsets.symmetric(vertical: 4),
          ),
          Expanded(
            flex: 2,
            child: Padding(
              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
              child: Text(
                numbers.trim(),
                style: MyTextStyle.styleBold.copyWith(fontSize: 16),
                textAlign: TextAlign.left,
                maxLines: 1,
                overflow: TextOverflow.ellipsis,
              ),
            ),
          ),
        ],
      ),
    );
  }
}
import 'package:ecom_modwir/controller/service_items_controller.dart';
import 'package:ecom_modwir/view/widget/services/cars/saudi_license_plate.dart';
import 'package:ecom_modwir/view/widget/services/cars/scroll_year.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';

class LicensePlateInputSection extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return GetBuilder<ServicesDisplayController>(
      builder: (licenseController) => Column(
        children: [
          ModernSaudiLicensePlate(),
          YearScrollWheel(
            scrollController: licenseController.scrollController,
            selectedYear: licenseController.selectedYear,
            onYearChanged: (year) => licenseController.updateYear(year),
          ),
        ],
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:get/get.dart';
import 'package:ecom_modwir/controller/license_plate_controller.dart';
import 'package:ecom_modwir/core/constant/color.dart';
import 'package:ecom_modwir/core/constant/textstyle_manger.dart';

class ModernSaudiLicensePlate extends StatelessWidget {
  ModernSaudiLicensePlate({super.key}) {
    // Use lazyPut instead of put for better memory management
    Get.lazyPut(() => LicensePlateController(), fenix: true);
  }

  @override
  Widget build(BuildContext context) {
    return GetBuilder<LicensePlateController>(
      builder: (controller) => Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text('license_plate'.tr, style: MyTextStyle.meduimBold),
              _ClearButton(controller: controller),
            ],
          ),
          const SizedBox(height: 8),
          _LicensePlateContainer(controller: controller),
          const SizedBox(height: 4),
        ],
      ),
    );
  }
}

class _ClearButton extends StatelessWidget {
  final LicensePlateController controller;

  const _ClearButton({required this.controller});

  @override
  Widget build(BuildContext context) {
    return TextButton.icon(
      onPressed: controller.clearAll,
      icon: const Icon(Icons.clear, size: 16),
      label: Text('clear'.tr),
      style: TextButton.styleFrom(
        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
        minimumSize: Size.zero,
      ),
    );
  }
}

class _LicensePlateContainer extends StatelessWidget {
  final LicensePlateController controller;

  const _LicensePlateContainer({required this.controller});

  @override
  Widget build(BuildContext context) {
    String language = controller.lang.toString();
    bool isArabic = language == "ar";
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: AppColor.blackColor, width: 3),
        boxShadow: [
          BoxShadow(
            color: AppColor.blackColor.withOpacity(0.1),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: IntrinsicHeight(
        child: Row(
          children: [
            _KSAEmblemSection(controller: controller),
            _LettersSection(controller: controller),
            _NumbersSection(controller: controller),
          ],
        ),
      ),
    );
  }
}

class _LettersSection extends StatelessWidget {
  final LicensePlateController controller;

  const _LettersSection({required this.controller});

  @override
  Widget build(BuildContext context) {
    String language = controller.lang.toString();
    bool isArabic = language == "ar";
    return Expanded(
      flex: 2,
      child: Container(
        padding: const EdgeInsets.symmetric(vertical: 8),
        decoration: BoxDecoration(
          border: isArabic
              ? Border(
                  left: BorderSide(
                    color: AppColor.blackColor,
                    width: 3,
                  ),
                )
              : Border(
                  right: BorderSide(
                    color: AppColor.blackColor,
                    width: 3,
                  ),
                ),
        ),
        child: Column(
          children: [
            // Arabic letters field
            _BidirectionalField(
              value: controller.arabicLetters,
              onChanged: controller.handleArabicLettersInput,
              style: MyTextStyle.notBold.copyWith(
                fontSize: 20,
                fontFamily: 'El_Messiri',
                letterSpacing: 5,
                color: AppColor.grey,
              ),
              hint: 'أ ب ج',
            ),
            Divider(color: AppColor.blackColor, thickness: 2, height: 30),
            // English letters field
            _BidirectionalField(
              value: controller.englishLetters,
              onChanged: controller.handleEnglishLettersInput,
              style: MyTextStyle.notBold.copyWith(
                fontSize: 14,
                letterSpacing: 3,
                color: AppColor.grey,
              ),
              hint: 'A B C',
            ),
          ],
        ),
      ),
    );
  }
}

class _NumbersSection extends StatelessWidget {
  final LicensePlateController controller;

  const _NumbersSection({required this.controller});

  @override
  Widget build(BuildContext context) {
    return Expanded(
      flex: 2,
      child: Container(
        padding: const EdgeInsets.symmetric(vertical: 15),
        child: Column(
          children: [
            // Arabic numbers field
            _BidirectionalField(
              value: controller.arabicNumbers,
              onChanged: controller.handleArabicNumbersInput,
              style: MyTextStyle.notBold.copyWith(
                fontSize: 20,
                fontFamily: 'IBM_Plex_Sans_Arabic',
                letterSpacing: 3,
                color: AppColor.grey,
              ),
              hint: '١ ٢ ٣ ٤',
              keyboardType: TextInputType.number,
            ),
            Divider(color: AppColor.blackColor, thickness: 2, height: 30),
            // English numbers field
            _BidirectionalField(
              value: controller.englishNumbers,
              onChanged: controller.handleEnglishNumbersInput,
              style: MyTextStyle.notBold.copyWith(
                fontSize: 14,
                fontWeight: FontWeight.w500,
                letterSpacing: 3,
                color: AppColor.grey,
              ),
              hint: '1 2 3 4',
              keyboardType: TextInputType.number,
            ),
          ],
        ),
      ),
    );
  }
}

class _BidirectionalField extends StatelessWidget {
  final String value;
  final ValueChanged<String> onChanged;
  final TextStyle style;
  final String hint;
  final TextInputType? keyboardType;

  const _BidirectionalField({
    required this.value,
    required this.onChanged,
    required this.style,
    required this.hint,
    this.keyboardType,
  });

  @override
  Widget build(BuildContext context) {
    return Expanded(
      child: TextField(
        // Don't set a controller directly with the value - this causes issues
        // with cursor position when the value changes
        onChanged: (newValue) {
          // Pass the cleaned value to the controller
          onChanged(newValue.replaceAll(' ', ''));
        },
        inputFormatters: [
          // Add this to maintain proper spacing
          FilteringTextInputFormatter.allow(RegExp(r'[\S ]')),
        ],
        controller: TextEditingController.fromValue(
          TextEditingValue(
            text: value,
            // Set the cursor position at the end
            selection: TextSelection.fromPosition(
              TextPosition(offset: value.length),
            ),
          ),
        ),
        keyboardType: keyboardType,
        textAlign: TextAlign.center,
        style: style,
        decoration: InputDecoration(
          border: InputBorder.none,
          contentPadding: EdgeInsets.zero,
          hintText: hint,
          hintStyle: TextStyle(color: AppColor.grey),
          counterText: '',
        ),
      ),
    );
  }
}

class _KSAEmblemSection extends StatelessWidget {
  final LicensePlateController controller;

  const _KSAEmblemSection({required this.controller});

  @override
  Widget build(BuildContext context) {
    String language = controller.lang.toString();
    bool isArabic = language == "ar";
    return Container(
      width: 50,
      padding: const EdgeInsets.symmetric(vertical: 4),
      decoration: BoxDecoration(
        border: isArabic
            ? Border(
                left: BorderSide(
                  color: AppColor.blackColor,
                  width: 3,
                ),
              )
            : Border(
                right: BorderSide(
                  color: AppColor.blackColor,
                  width: 3,
                ),
              ),
      ),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          // Saudi emblem
          Image.asset(
            'assets/images/saudi_logo.png',
            height: 25,
            width: 25,
            fit: BoxFit.contain,
            errorBuilder: (context, error, stackTrace) => Container(
              height: 25,
              width: 25,
              decoration: BoxDecoration(
                border: Border.all(color: AppColor.blackColor),
                borderRadius: BorderRadius.circular(4),
              ),
              child: const Icon(Icons.image_not_supported_outlined, size: 20),
            ),
          ),
          const SizedBox(height: 2),
          // Arabic text for Saudi Arabia
          Text(
            'السعودية',
            style: TextStyle(
              fontFamily: 'Cairo',
              fontWeight: FontWeight.bold,
              fontSize: 9,
              color: AppColor.blackColor,
            ),
          ),
          const SizedBox(height: 2),
          // KSA text
          Column(
            children: [
              Text('K',
                  style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: AppColor.blackColor,
                      fontSize: 18)),
              Text('S',
                  style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: AppColor.blackColor,
                      fontSize: 18)),
              Text('A',
                  style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: AppColor.blackColor,
                      fontSize: 18)),
              SizedBox(height: 4),
              CircleAvatar(radius: 6, backgroundColor: AppColor.blackColor),
            ],
          ),
        ],
      ),
    );
  }
}
import 'package:ecom_modwir/controller/service_items_controller.dart';
import 'package:ecom_modwir/core/constant/color.dart';
import 'package:ecom_modwir/core/constant/textstyle_manger.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';

class YearScrollWheel extends StatelessWidget {
  final int? selectedYear;
  final Function(int) onYearChanged;
  final FixedExtentScrollController scrollController;

  const YearScrollWheel({
    Key? key,
    required this.selectedYear,
    required this.onYearChanged,
    required this.scrollController,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final currentYear = DateTime.now().year;

    return Container(
      height: 120,
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.grey.shade300),
      ),
      child: ListWheelScrollView.useDelegate(
        controller: scrollController,
        itemExtent: 40,
        physics: const FixedExtentScrollPhysics(),
        diameterRatio: 1.5,
        magnification: 1.2,
        useMagnifier: true,
        onSelectedItemChanged: (index) {
          final year = currentYear - index;
          onYearChanged(year);
        },
        childDelegate: ListWheelChildBuilderDelegate(
          builder: (context, index) {
            final year = currentYear - index;
            return GetBuilder<ServicesDisplayController>(
              builder: (controller) => Center(
                child: Text(
                  year.toString(),
                  style: MyTextStyle.meduimBold.copyWith(
                    color: year == controller.selectedYear
                        ? AppColor.primaryColor
                        : AppColor.grey2,
                  ),
                ),
              ),
            );
          },
          childCount: 30,
        ),
      ),
    );
  }
}
import 'package:ecom_modwir/core/constant/color.dart';
import 'package:ecom_modwir/core/constant/textstyle_manger.dart';
import 'package:ecom_modwir/data/model/cars/make_model.dart';
import 'package:ecom_modwir/linkapi.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';

void showSelectionModal<T>(
  BuildContext context,
  String title,
  List<T> items,
  Function(int) onSelect,
) {
  showModalBottomSheet(
    context: context,
    isScrollControlled: true,
    backgroundColor: Colors.transparent,
    builder: (context) => DraggableScrollableSheet(
      initialChildSize: 0.7,
      minChildSize: 0.5,
      maxChildSize: 0.9,
      snap: true,
      snapSizes: const [0.5, 0.7, 0.9],
      builder: (context, scrollController) => Container(
        margin: EdgeInsets.only(
          top: MediaQuery.of(context).padding.top + kToolbarHeight,
        ),
        decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
        ),
        constraints: BoxConstraints(
          maxHeight: MediaQuery.of(context).size.height * 0.9,
        ),
        child: SelectionModal(
          title: title,
          items: items,
          onSelect: (index) {
            onSelect(index);
            Navigator.pop(context);
          },
          scrollController: scrollController,
        ),
      ),
    ),
  );
}

class SelectionModal<T> extends StatefulWidget {
  final String title;
  final List<T> items;
  final Function(int) onSelect;
  final ScrollController? scrollController;

  const SelectionModal({
    super.key,
    required this.title,
    required this.items,
    required this.onSelect,
    this.scrollController,
  });

  @override
  State<SelectionModal<T>> createState() => _SelectionModalState<T>();
}

class _SelectionModalState<T> extends State<SelectionModal<T>> {
  late List<T> filteredItems;
  final TextEditingController _searchController = TextEditingController();

  @override
  void initState() {
    super.initState();
    filteredItems = widget.items;
    _searchController.addListener(_filterItems);
  }

  void _filterItems() {
    final query = _searchController.text.toLowerCase();
    setState(() {
      filteredItems = widget.items.where((item) {
        if (item is CarMake) {
          return (item.name['en']?.toLowerCase().contains(query) ?? false) ||
              (item.name['ar']?.toLowerCase().contains(query) ?? false);
        }
        if (item is CarModel) {
          return (item.name['en']?.toLowerCase().contains(query) ?? false) ||
              (item.name['ar']?.toLowerCase().contains(query) ?? false);
        }
        return false;
      }).toList();
    });
  }

  bool _isMakeSelection() {
    return filteredItems.isNotEmpty && filteredItems.first is CarMake;
  }

  Widget _buildDragHandle() {
    return Center(
      child: Container(
        width: 40,
        height: 4,
        margin: const EdgeInsets.symmetric(vertical: 8),
        decoration: BoxDecoration(
          color: Colors.grey[300],
          borderRadius: BorderRadius.circular(2),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: EdgeInsets.only(
        bottom: MediaQuery.of(context).viewInsets.bottom,
      ),
      child: Column(
        children: [
          _buildDragHandle(),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  widget.title,
                  style: MyTextStyle.styleBold.copyWith(fontSize: 18),
                ),
                IconButton(
                  icon: const Icon(Icons.close),
                  onPressed: () => Navigator.pop(context),
                ),
              ],
            ),
          ),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            child: TextField(
              controller: _searchController,
              decoration: InputDecoration(
                hintText: 'search_here'.tr,
                prefixIcon: Icon(Icons.search, color: AppColor.grey),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
            ),
          ),
          Expanded(
            child: _isMakeSelection() ? _buildMakeGrid() : _buildModelList(),
          ),
        ],
      ),
    );
  }

  Widget _buildMakeGrid() {
    return GridView.builder(
      controller: widget.scrollController,
      padding: const EdgeInsets.all(16),
      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 3,
        childAspectRatio: 0.85,
        mainAxisSpacing: 12,
        crossAxisSpacing: 12,
      ),
      itemCount: filteredItems.length,
      itemBuilder: (context, index) =>
          _buildMakeItem(filteredItems[index] as CarMake),
    );
  }

  Widget _buildModelList() {
    return ListView.separated(
      controller: widget.scrollController,
      itemCount: filteredItems.length,
      separatorBuilder: (_, __) => const Divider(
        color: AppColor.grey,
        height: 1,
        thickness: 1,
      ),
      itemBuilder: (context, index) =>
          _buildModelItem(filteredItems[index] as CarModel),
    );
  }

  Widget _buildMakeItem(CarMake make) {
    return InkWell(
      onTap: () => widget.onSelect(widget.items.indexOf(make as T)),
      child: Container(
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(12),
          boxShadow: [
            BoxShadow(
              color: Colors.grey.withOpacity(0.1),
              spreadRadius: 1,
              blurRadius: 6,
            ),
          ],
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Flexible(
              child: Padding(
                padding: const EdgeInsets.all(8),
                child: make.logo!.isNotEmpty
                    ? Image.network(
                        "${AppLink.carMakeLogo}/${make.logo}",
                        width: 60,
                        height: 60,
                        errorBuilder: (_, __, ___) =>
                            Icon(Icons.directions_car, size: 40),
                      )
                    : Icon(Icons.directions_car, size: 40),
              ),
            ),
            Padding(
              padding: const EdgeInsets.only(bottom: 8),
              child: Column(
                children: [
                  Text(
                    make.name['en'] ?? 'N/A',
                    style: MyTextStyle.smallBold,
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                  ),
                  Text(
                    make.name['ar'] ?? 'N/A',
                    style: MyTextStyle.smallBold.copyWith(
                      fontFamily: 'Cairo',
                    ),
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildModelItem(CarModel model) {
    return InkWell(
      onTap: () => widget.onSelect(widget.items.indexOf(model as T)),
      child: Padding(
        padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Expanded(
              child: Text(
                model.name['ar'] ?? 'N/A',
                style: MyTextStyle.meduimBold.copyWith(
                  fontFamily: 'Cairo',
                  color: AppColor.blackColor,
                ),
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Text(
                model.name['en'] ?? 'N/A',
                style: MyTextStyle.meduimBold.copyWith(
                  color: AppColor.grey2,
                ),
                textAlign: TextAlign.end,
              ),
            ),
          ],
        ),
      ),
    );
  }
}
import 'package:ecom_modwir/core/constant/color.dart';
import 'package:flutter/material.dart';

ThemeData themeEnglish = ThemeData(
  fontFamily: "El_Messiri",
  floatingActionButtonTheme: FloatingActionButtonThemeData(
    backgroundColor: AppColor.primaryColor,
  ),
  appBarTheme: AppBarTheme(
    centerTitle: true,
    elevation: 0,
    iconTheme: IconThemeData(
      color: AppColor.primaryColor,
    ),
    titleTextStyle: TextStyle(
      color: AppColor.primaryColor,
      fontWeight: FontWeight.bold,
      fontSize: 25,
      fontFamily: "El_Messiri",
    ),
    backgroundColor: Colors.grey[50],
  ),
  textTheme: TextTheme(
      displayLarge: TextStyle(
          fontWeight: FontWeight.bold,
          fontSize: 22,
          color: AppColor.blackColor),
      displayMedium: TextStyle(
          fontWeight: FontWeight.bold,
          fontSize: 26,
          color: AppColor.blackColor),
      bodyLarge: TextStyle(
          height: 2,
          color: AppColor.grey,
          fontWeight: FontWeight.bold,
          fontSize: 14),
      bodyMedium: TextStyle(height: 2, color: AppColor.grey, fontSize: 14)),
  primarySwatch: Colors.blue,
);

ThemeData themeArabic = ThemeData(
  fontFamily: "Cairo",
  floatingActionButtonTheme: FloatingActionButtonThemeData(
    backgroundColor: AppColor.primaryColor,
  ),
  appBarTheme: AppBarTheme(
    centerTitle: true,
    elevation: 0,
    iconTheme: IconThemeData(
      color: AppColor.primaryColor,
    ),
    titleTextStyle: TextStyle(
      color: AppColor.primaryColor,
      fontWeight: FontWeight.bold,
      fontSize: 25,
      fontFamily: "Cairo",
    ),
    backgroundColor: Colors.grey[50],
  ),
  textTheme: TextTheme(
      displayLarge: TextStyle(
          fontWeight: FontWeight.bold,
          fontSize: 22,
          color: AppColor.blackColor),
      displayMedium: TextStyle(
          fontWeight: FontWeight.bold,
          fontSize: 26,
          color: AppColor.blackColor),
      bodyLarge: TextStyle(
          height: 2,
          color: AppColor.grey,
          fontWeight: FontWeight.bold,
          fontSize: 14),
      bodyMedium: TextStyle(height: 2, color: AppColor.grey, fontSize: 14)),
  primarySwatch: Colors.blue,
);
import 'package:flutter/material.dart';
import 'package:hexcolor/hexcolor.dart';

class AppColor {
  static const Color grey = Color(0xff8e8e8e);
  static Color white = HexColor('#ffffff');
  static Color deepblue = Colors.blue.shade900;
  static const Color colorTransport = Colors.transparent;
  static Color greenColor = Colors.green.shade700;

  static const Color grey2 = Color.fromARGB(255, 66, 66, 66);
  // static const Color primaryColor = Color(0xff5DB1DF);
  static Color backgroundColor = HexColor('#fbf4f4');

  // static Color primaryColor = Color(0xFF9C2315);
  // static Color primaryColor = HexColor('#537FE7');

  // static Color secondaryColor = HexColor('#00337c');
  static const Color deleteColor = Color(0xFFC41401);

  static const Color fourthColor = Color(0xFF084B93);
  static Color thirdColor = HexColor('#C0EEF2');

  static Color primaryColor = Color(0xFFA48F2E);
  static Color secondaryColor = Color(0xFFD6B58A);
  static Color blackColor = HexColor('#212121');

  static Color accentColor = Color(0xFFFFDE59);
}
import 'package:flutter/material.dart';

class AppSizes {
  static dynamic height(context) {
    return MediaQuery.of(context).size.height;
  }

  static dynamic width(context) {
    return MediaQuery.of(context).size.width;
  }

  static dynamic meduimsize(context) {
    return Size(width(context) * 0.5, height(context) * 0.07);
  }
  static dynamic customsize(heigt,widh,context) {
    return Size(width(context) * heigt, height(context) * widh);
  }

  static dynamic fullsize(context) {
    return Size(width(context), height(context) * 0.075);
  }

  static dynamic getHight(context, hight) {
    final double customhight = hight / 760;
    return height(context) * customhight;
  }

  static dynamic getWidth(context, wiedth) {
    final double customwidth = wiedth / 360;
    return width(context) * customwidth;
  }
}
import 'package:ecom_modwir/core/constant/color_manger.dart';
import 'package:flutter/material.dart';

class MyTextStyle {
  static TextStyle styleBold = const TextStyle(
    fontFamily: "El_Messiri",
    fontWeight: FontWeight.bold,
    fontSize: 22,
    color: Colors.black,
  );

  static TextStyle animationstyle = const TextStyle(
      color: Colors.white, fontSize: 50, fontWeight: FontWeight.bold);
  static TextStyle bigCapiton = const TextStyle(
    fontFamily: "El_Messiri",
    color: Colors.grey,
    fontSize: 17,
  );

  static TextStyle smallCapiton = const TextStyle(
    color: Colors.grey,
    fontSize: 12,
  );
  static TextStyle textButtonTow = TextStyle(
    fontFamily: "El_Messiri",
    fontSize: 14,
    fontWeight: FontWeight.normal,
    color: ColorApp.deepblue,
  );
  static TextStyle smallBold = const TextStyle(
    fontWeight: FontWeight.bold,
  );
  static TextStyle notBold = const TextStyle(
    fontWeight: FontWeight.w300,
  );
  static TextStyle textbutton = TextStyle(color: ColorApp.lightblue);
  static TextStyle meduimBold = const TextStyle(
      fontSize: 18, fontWeight: FontWeight.bold, color: Colors.black);
  static TextStyle modelbottomsheet = const TextStyle(
    fontSize: 22,
  );
}
import 'package:ecom_modwir/core/constant/color_manger.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:google_fonts/google_fonts.dart';

ThemeData lightTheme = ThemeData(
    scaffoldBackgroundColor: Colors.white,
    textTheme: GoogleFonts.alexandriaTextTheme(ThemeData.light().textTheme),
    iconTheme: const IconThemeData(
      color: Colors.black,
      size: 25,
    ),
    bottomNavigationBarTheme: BottomNavigationBarThemeData(
      elevation: 10,
      selectedIconTheme: const IconThemeData(color: Colors.black, size: 25),
      selectedItemColor: Colors.black,
      type: BottomNavigationBarType.fixed,
      unselectedIconTheme: IconThemeData(color: Colors.grey.shade400, size: 25),
      unselectedItemColor: Colors.grey.shade400,
    ),
    floatingActionButtonTheme: FloatingActionButtonThemeData(
        foregroundColor: Colors.white, backgroundColor: ColorApp.lightblue));
SystemUiOverlayStyle lightStatusBar = SystemUiOverlayStyle.light.copyWith(
    statusBarColor: Colors.white, statusBarIconBrightness: Brightness.dark);
import 'package:ecom_modwir/controller/settings_controller.dart';
import 'package:ecom_modwir/core/constant/color.dart';
import 'package:ecom_modwir/core/constant/imgaeasset.dart';
import 'package:ecom_modwir/core/constant/routes.dart';
import 'package:ecom_modwir/view/widget/language/custombuttomlang.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:url_launcher/url_launcher.dart';

class SettingsPage extends StatelessWidget {
  const SettingsPage({super.key});

  @override
  Widget build(BuildContext context) {
    SettingsController controller = Get.put(SettingsController());
    return Container(
      child: ListView(
        children: [
          Stack(
              clipBehavior: Clip.none,
              alignment: Alignment.center,
              children: [
                Container(
                  height: Get.width / 3,
                  color: AppColor.primaryColor,
                ),
                Positioned(
                  top: Get.width / 3.9,
                  child: Container(
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(100),
                    ),
                    child: CircleAvatar(
                      radius: 40,
                      backgroundColor: Colors.grey[100],
                      backgroundImage: AssetImage(AppImageAsset.avatar),
                    ),
                  ),
                ),
              ]),
          SizedBox(height: 100),
          Container(
            padding: EdgeInsets.symmetric(horizontal: 10),
            child: Card(
              child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    // ListTile(
                    //   onTap: () {},
                    //   trailing: Switch(
                    //     onChanged: (val) {},
                    //     value: true,
                    //   ),
                    //   title: Text("Disable Notifications"),
                    // ),

                    ListTile(
                      onTap: () {
                        Get.toNamed(AppRoute.ordersPending);
                      },
                      trailing: Icon(Icons.card_travel),
                      title: Text("Orders"),
                    ),
                    ListTile(
                      onTap: () {
                        Get.toNamed(AppRoute.ordersArchive);
                      },
                      trailing: Icon(Icons.archive_outlined),
                      title: Text("Archive"),
                    ),
                    ListTile(
                      onTap: () {
                        Get.toNamed(AppRoute.addressview);
                      },
                      trailing: Icon(Icons.location_on_outlined),
                      title: Text("Address"),
                    ),
                    ListTile(
                      onTap: () {},
                      trailing: Icon(Icons.info_outlined),
                      title: Text("About us"),
                    ),
                    ListTile(
                      onTap: () {
                        launchUrl(Uri.parse("tel:+967775992377"));
                      },
                      trailing: Icon(Icons.phone_callback_outlined),
                      title: Text("Contact us"),
                    ),
                    ListTile(
                      onTap: () {
                        controller.logout();
                      },
                      trailing: Icon(Icons.exit_to_app),
                      title: Text("Logout"),
                    ),
                    CustomButtonLang(
                        textbutton: "Ar",
                        onPressed: () {
                          controller.changeLang("ar");
                          Get.toNamed(AppRoute.homepage);
                        }),
                    CustomButtonLang(
                        textbutton: "En",
                        onPressed: () {
                          controller.changeLang("en");
                          Get.toNamed(AppRoute.homepage);
                        }),
                  ]),
            ),
          ),
        ],
      ),
    );
  }
}

]

and here are the models :  
[
  // make_model.dart
class CarMake {
  final int makeId;
  final Map<String, String> name; // Changed to Map
  final String logo;
  final int status;
  final List<CarModel> models;

  CarMake({
    required this.makeId,
    required this.name,
    required this.logo,
    required this.status,
    required this.models,
  });

  factory CarMake.fromJson(Map<String, dynamic> json) => CarMake(
        makeId: json['make_id'],
        name: Map<String, String>.from(json['name']), // Map conversion
        logo: json['logo'],
        status: json['status'],
        models: List<CarModel>.from(
            json['models'].map((x) => CarModel.fromJson(x))),
      );
}

// car_model.dart
class CarModel {
  final int modelId;
  final int makeId;
  final Map<String, String> name; // Changed to Map
  final String year;
  final int status;

  CarModel({
    required this.modelId,
    required this.makeId,
    required this.name,
    required this.year,
    required this.status,
  });

  factory CarModel.fromJson(Map<String, dynamic> json) => CarModel(
        modelId: json['model_id'],
        makeId: json['make_id'],
        name: Map<String, String>.from(json['name']), // Map conversion
        year: json['year'].toString(),
        status: json['status'],
      );
}
// UserCarModel Model class
import 'dart:convert';

class UserCarModel {
  final int vehicleId;
  final int? userId;
  final int makeId;
  final int modelId;
  final String makeName;
  final String modelName;
  final String makeLogo;
  final int year;
  final Map<String, dynamic> licensePlate;
  final int status;

  UserCarModel({
    required this.vehicleId,
    this.userId,
    required this.makeId,
    required this.modelId,
    required this.makeName,
    required this.modelName,
    this.makeLogo = '',
    required this.year,
    required this.licensePlate,
    this.status = 0,
  });

  factory UserCarModel.fromJson(Map<String, dynamic> json) {
    return UserCarModel(
      vehicleId: json['vehicle_id'] ?? 0,
      userId: json['user_id'],
      makeId: json['make_id'] ?? 0,
      modelId: json['model_id'] ?? 0,
      makeName: json['make_name'] ?? '',
      modelName: json['model_name'] ?? '',
      makeLogo: json['make_logo'] ?? '',
      year: json['year'] ?? DateTime.now().year,
      licensePlate: json['license_plate_number'] is String
          ? jsonDecode(json['license_plate_number'])
          : json['license_plate_number'] ?? {'en': '-', 'ar': '-'},
      status: json['status'] ?? 0,
    );
  }

  String toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['vehicle_id'] = this.vehicleId;
    data['user_id'] = this.userId;
    data['make_id'] = this.makeId;
    data['model_id'] = this.modelId;
    data['year'] = this.year;
    data['license_plate_number'] = this.licensePlate;
    return jsonEncode(data);
  }
}
import 'package:ecom_modwir/data/model/services/note_services_model.dart';

class SubServiceModel {
  final int subServiceId;
  final int serviceId;
  bool isSelected = false;

  final String name;
  final double price;
  final int status;
  final List<ServiceNote> notes;

  SubServiceModel({
    required this.subServiceId,
    required this.serviceId,
    required this.name,
    required this.price,
    required this.status,
    required this.notes,
  });

  factory SubServiceModel.fromJson(Map<String, dynamic> json) {
    return SubServiceModel(
      subServiceId: json['sub_service_id'] as int? ?? 0,
      serviceId: json['service_id'] as int? ?? 0,
      name: json['name'] as String? ?? '',
      price: (json['price'] as num?)?.toDouble() ?? 0.0,
      status: json['status'] as int? ?? 0,
      // Handle both null and missing notes field
      notes: (json['notes'] as List<dynamic>? ?? [])
          .map((note) => ServiceNote.fromJson(note))
          .toList(),
    );
  }
  Map<String, dynamic> toJson() => {
        'service_id': serviceId,
        'sub_service_id': subServiceId,
        'name': name,
        'status': status,
        'notes': notes.map((v) => v.toJson()).toList(),
      };
}
class ServiceNote {
  int? noteId;
  int? subServiceId;

  String? content;

  ServiceNote({
    this.noteId,
    this.subServiceId,
    this.content,
  });

  factory ServiceNote.fromJson(Map<String, dynamic> json) {
    return ServiceNote(
      noteId: json['note_id'] as int? ?? 0,
      subServiceId: json['sub_service_id'] as int? ?? 0,
      content: json['content'] as String? ?? '',
    );
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();

    data['note_id'] = this.noteId;
    data['sub_service_id'] = this.subServiceId;
    data['content'] = this.content;
    return data;
  }
}
import 'package:ecom_modwir/data/model/services/sub_services_model.dart';

class ServicesModel {
  int? serviceId;
  String? serviceName;
  String? serviceImg;
  int? status;
  List<SubServiceModel>? subServices;

  ServicesModel({
    this.serviceId,
    this.serviceName,
    this.serviceImg,
    this.status,
    this.subServices,
  });

  ServicesModel.fromJson(Map<String, dynamic> json) {
    serviceId = json['service_id'];
    serviceName = json['service_name'];
    serviceImg = json['service_img'];
    status = json['status'];

    subServices = (json['sub_services'] as List<dynamic>?)
        ?.map((v) => SubServiceModel.fromJson(v))
        .toList();
  }

  Map<String, dynamic> toJson() => {
        'service_id': serviceId,
        'service_name': serviceName,
        'service_img': serviceImg,
        'status': status,
        'sub_services': subServices?.map((v) => v.toJson()).toList(),
      };
}

]